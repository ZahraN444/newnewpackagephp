<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use stdClass;

class ZipLookupCity implements \JsonSerializable
{
    /**
     * @var string
     */
    private $city;

    /**
     * @var string
     */
    private $state;

    /**
     * @var string
     */
    private $county;

    /**
     * @var string
     */
    private $countyFips;

    /**
     * @var bool
     */
    private $preferred;

    /**
     * @param string $city
     * @param string $state
     * @param string $county
     * @param string $countyFips
     * @param bool $preferred
     */
    public function __construct(string $city, string $state, string $county, string $countyFips, bool $preferred)
    {
        $this->city = $city;
        $this->state = $state;
        $this->county = $county;
        $this->countyFips = $countyFips;
        $this->preferred = $preferred;
    }

    /**
     * Returns City.
     */
    public function getCity(): string
    {
        return $this->city;
    }

    /**
     * Sets City.
     *
     * @required
     * @maps city
     */
    public function setCity(string $city): void
    {
        $this->city = $city;
    }

    /**
     * Returns State.
     * The <a href="https://en.wikipedia.org/wiki/ISO_3166-2" target="_blank">ISO 3166-2</a> two letter
     * code for the state.
     */
    public function getState(): string
    {
        return $this->state;
    }

    /**
     * Sets State.
     * The <a href="https://en.wikipedia.org/wiki/ISO_3166-2" target="_blank">ISO 3166-2</a> two letter
     * code for the state.
     *
     * @required
     * @maps state
     */
    public function setState(string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns County.
     * County name of the address city.
     */
    public function getCounty(): string
    {
        return $this->county;
    }

    /**
     * Sets County.
     * County name of the address city.
     *
     * @required
     * @maps county
     */
    public function setCounty(string $county): void
    {
        $this->county = $county;
    }

    /**
     * Returns County Fips.
     * A 5-digit <a href="https://en.wikipedia.org/wiki/FIPS_county_code" target="_blank">FIPS county
     * code</a> which uniquely identifies `components[county]`. It consists of a 2-digit state code and a 3-
     * digit county code.
     */
    public function getCountyFips(): string
    {
        return $this->countyFips;
    }

    /**
     * Sets County Fips.
     * A 5-digit <a href="https://en.wikipedia.org/wiki/FIPS_county_code" target="_blank">FIPS county
     * code</a> which uniquely identifies `components[county]`. It consists of a 2-digit state code and a 3-
     * digit county code.
     *
     * @required
     * @maps county_fips
     */
    public function setCountyFips(string $countyFips): void
    {
        $this->countyFips = $countyFips;
    }

    /**
     * Returns Preferred.
     * Indicates whether or not the city is the <a href="https://en.wikipedia.
     * org/wiki/ZIP_Code#ZIP_Codes_and_previous_zoning_lines" target="_blank">USPS default city</a>
     * (preferred city) of a ZIP code. There is only one preferred city per ZIP code, which will always be
     * in position 0 in the array of cities.
     */
    public function getPreferred(): bool
    {
        return $this->preferred;
    }

    /**
     * Sets Preferred.
     * Indicates whether or not the city is the <a href="https://en.wikipedia.
     * org/wiki/ZIP_Code#ZIP_Codes_and_previous_zoning_lines" target="_blank">USPS default city</a>
     * (preferred city) of a ZIP code. There is only one preferred city per ZIP code, which will always be
     * in position 0 in the array of cities.
     *
     * @required
     * @maps preferred
     */
    public function setPreferred(bool $preferred): void
    {
        $this->preferred = $preferred;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['city']        = $this->city;
        $json['state']       = $this->state;
        $json['county']      = $this->county;
        $json['county_fips'] = $this->countyFips;
        $json['preferred']   = $this->preferred;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
