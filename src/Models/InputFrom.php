<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\ApiHelper;
use stdClass;

class InputFrom implements \JsonSerializable
{
    /**
     * @var string|InlineAddressUs|InlineAddressIntl|null
     */
    private $from;

    /**
     * Returns From.
     * Must either be an address ID or an inline object with correct address parameters. Must be a US
     * address unless using a `custom_envelope`. All addresses will be standardized into uppercase without
     * being modified by verification.
     *
     * @return string|InlineAddressUs|InlineAddressIntl|null
     */
    public function getFrom()
    {
        return $this->from;
    }

    /**
     * Sets From.
     * Must either be an address ID or an inline object with correct address parameters. Must be a US
     * address unless using a `custom_envelope`. All addresses will be standardized into uppercase without
     * being modified by verification.
     *
     * @maps from
     * @mapsBy anyOf(oneOf(string,oneOf(InlineAddressUs,InlineAddressIntl)),null)
     *
     * @param string|InlineAddressUs|InlineAddressIntl|null $from
     */
    public function setFrom($from): void
    {
        $this->from = $from;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->from)) {
            $json['from'] =
                ApiHelper::getJsonHelper()->verifyTypes(
                    $this->from,
                    'anyOf(oneOf(string,oneOf(InlineAddressUs,InlineAddressIntl)),null)'
                );
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
