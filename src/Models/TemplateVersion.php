<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\Utils\DateTimeHelper;
use stdClass;

class TemplateVersion implements \JsonSerializable
{
    /**
     * @var array
     */
    private $description = [];

    /**
     * @var string
     */
    private $html;

    /**
     * @var array|null
     */
    private $engine;

    /**
     * @var string[]|null
     */
    private $requiredVars;

    /**
     * @var \DateTime
     */
    private $dateCreated;

    /**
     * @var \DateTime
     */
    private $dateModified;

    /**
     * @var bool|null
     */
    private $deleted;

    /**
     * @var string
     */
    private $object;

    /**
     * @var string
     */
    private $id;

    /**
     * @var bool|null
     */
    private $suggestJsonEditor;

    /**
     * @var array|null
     */
    private $mergeVariables;

    /**
     * @param string $html
     * @param \DateTime $dateCreated
     * @param \DateTime $dateModified
     * @param string $id
     */
    public function __construct(string $html, \DateTime $dateCreated, \DateTime $dateModified, string $id)
    {
        $this->html = $html;
        $this->dateCreated = $dateCreated;
        $this->dateModified = $dateModified;
        $this->id = $id;
    }

    /**
     * Returns Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Html.
     * An HTML string of less than 100,000 characters to be used as the `published_version` of this
     * template. See [here](#section/HTML-Examples) for guidance on designing HTML templates. Please see
     * endpoint specific documentation for any other product-specific HTML details:
     * - [Postcards](#operation/postcard_create) - `front` and `back`
     * - [Self Mailers](#operation/self_mailer_create) - `inside` and `outside`
     * - [Letters](#operation/letter_create) - `file`
     * - [Checks](#operation/check_create) - `check_bottom` and `attachment`
     * - [Cards](#operation/card_create) - `front` and `back`
     *
     * If there is a syntax error with your variable names within your HTML, then an error will be thrown,
     * e.g. using a `{{#users}}` opening tag without the corresponding closing tag `{{/users}}`.
     */
    public function getHtml(): string
    {
        return $this->html;
    }

    /**
     * Sets Html.
     * An HTML string of less than 100,000 characters to be used as the `published_version` of this
     * template. See [here](#section/HTML-Examples) for guidance on designing HTML templates. Please see
     * endpoint specific documentation for any other product-specific HTML details:
     * - [Postcards](#operation/postcard_create) - `front` and `back`
     * - [Self Mailers](#operation/self_mailer_create) - `inside` and `outside`
     * - [Letters](#operation/letter_create) - `file`
     * - [Checks](#operation/check_create) - `check_bottom` and `attachment`
     * - [Cards](#operation/card_create) - `front` and `back`
     *
     * If there is a syntax error with your variable names within your HTML, then an error will be thrown,
     * e.g. using a `{{#users}}` opening tag without the corresponding closing tag `{{/users}}`.
     *
     * @required
     * @maps html
     */
    public function setHtml(string $html): void
    {
        $this->html = $html;
    }

    /**
     * Returns Engine.
     */
    public function getEngine(): ?array
    {
        return $this->engine;
    }

    /**
     * Sets Engine.
     *
     * @maps engine
     */
    public function setEngine(?array $engine): void
    {
        $this->engine = $engine;
    }

    /**
     * Returns Required Vars.
     * An array of required variables to be used in a template. Only available for `handlebars` templates.
     *
     * @return string[]|null
     */
    public function getRequiredVars(): ?array
    {
        return $this->requiredVars;
    }

    /**
     * Sets Required Vars.
     * An array of required variables to be used in a template. Only available for `handlebars` templates.
     *
     * @maps required_vars
     *
     * @param string[]|null $requiredVars
     */
    public function setRequiredVars(?array $requiredVars): void
    {
        $this->requiredVars = $requiredVars;
    }

    /**
     * Returns Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     */
    public function getDateCreated(): \DateTime
    {
        return $this->dateCreated;
    }

    /**
     * Sets Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     *
     * @required
     * @maps date_created
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateCreated(\DateTime $dateCreated): void
    {
        $this->dateCreated = $dateCreated;
    }

    /**
     * Returns Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     */
    public function getDateModified(): \DateTime
    {
        return $this->dateModified;
    }

    /**
     * Sets Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     *
     * @required
     * @maps date_modified
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateModified(\DateTime $dateModified): void
    {
        $this->dateModified = $dateModified;
    }

    /**
     * Returns Deleted.
     * Only returned if the resource has been successfully deleted.
     */
    public function getDeleted(): ?bool
    {
        return $this->deleted;
    }

    /**
     * Sets Deleted.
     * Only returned if the resource has been successfully deleted.
     *
     * @maps deleted
     */
    public function setDeleted(?bool $deleted): void
    {
        $this->deleted = $deleted;
    }

    /**
     * Returns Object.
     * Value is resource type.
     */
    public function getObject(): string
    {
        return $this->object;
    }

    /**
     * Sets Object.
     * Value is resource type.
     *
     * @maps object
     */
    public function setObject(string $object): void
    {
        $this->object = $object;
    }

    /**
     * Returns Id.
     * Unique identifier prefixed with `vrsn_`.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique identifier prefixed with `vrsn_`.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Suggest Json Editor.
     * Used by frontend, true if the template uses advanced features.
     */
    public function getSuggestJsonEditor(): ?bool
    {
        return $this->suggestJsonEditor;
    }

    /**
     * Sets Suggest Json Editor.
     * Used by frontend, true if the template uses advanced features.
     *
     * @maps suggest_json_editor
     */
    public function setSuggestJsonEditor(?bool $suggestJsonEditor): void
    {
        $this->suggestJsonEditor = $suggestJsonEditor;
    }

    /**
     * Returns Merge Variables.
     * Object representing the keys of every merge variable present in the template. It has one key named
     * 'keys', and its value is an array of strings.
     */
    public function getMergeVariables(): ?array
    {
        return $this->mergeVariables;
    }

    /**
     * Sets Merge Variables.
     * Object representing the keys of every merge variable present in the template. It has one key named
     * 'keys', and its value is an array of strings.
     *
     * @maps merge_variables
     */
    public function setMergeVariables(?array $mergeVariables): void
    {
        $this->mergeVariables = $mergeVariables;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->description)) {
            $json['description']         = $this->description['value'];
        }
        $json['html']                    = $this->html;
        if (isset($this->engine)) {
            $json['engine']              = $this->engine;
        }
        if (isset($this->requiredVars)) {
            $json['required_vars']       = $this->requiredVars;
        }
        $json['date_created']            = DateTimeHelper::toRfc3339DateTime($this->dateCreated);
        $json['date_modified']           = DateTimeHelper::toRfc3339DateTime($this->dateModified);
        if (isset($this->deleted)) {
            $json['deleted']             = $this->deleted;
        }
        $json['object']                  = $this->object;
        $json['id']                      = $this->id;
        if (isset($this->suggestJsonEditor)) {
            $json['suggest_json_editor'] = $this->suggestJsonEditor;
        }
        if (isset($this->mergeVariables)) {
            $json['merge_variables']     = $this->mergeVariables;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
