<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\ApiHelper;
use stdClass;

class Wordsatcheckbottom implements \JsonSerializable
{
    /**
     * @var array
     */
    private $description = [];

    /**
     * @var array<string,string>|null
     */
    private $metadata;

    /**
     * @var array
     */
    private $mergeVariables = [];

    /**
     * @var array|null
     */
    private $sendDate;

    /**
     * @var string|null
     */
    private $mailType;

    /**
     * @var array
     */
    private $memo = [];

    /**
     * @var int|null
     */
    private $checkNumber;

    /**
     * @var string
     */
    private $message;

    /**
     * @var array
     */
    private $useType;

    /**
     * @var string|Addressobjwithnamedefined|Addressobjwithcompanydefined
     */
    private $to;

    /**
     * @var string|InlineAddressUs
     */
    private $from;

    /**
     * @var string
     */
    private $bankAccount;

    /**
     * @var float
     */
    private $amount;

    /**
     * @var string|null
     */
    private $logo;

    /**
     * @var array|null
     */
    private $checkBottom;

    /**
     * @var string|null
     */
    private $attachment;

    /**
     * @var string|null
     */
    private $billingGroupId;

    /**
     * @param string $message
     * @param array $useType
     * @param string|Addressobjwithnamedefined|Addressobjwithcompanydefined $to
     * @param string|InlineAddressUs $from
     * @param string $bankAccount
     * @param float $amount
     */
    public function __construct(string $message, array $useType, $to, $from, string $bankAccount, float $amount)
    {
        $this->message = $message;
        $this->useType = $useType;
        $this->to = $to;
        $this->from = $from;
        $this->bankAccount = $bankAccount;
        $this->amount = $amount;
    }

    /**
     * Returns Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @return array<string,string>|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @maps metadata
     *
     * @param array<string,string>|null $metadata
     */
    public function setMetadata(?array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Merge Variables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name": "Harry"}` to
     * render `Harry`. `merge_variables` must be an object. Any type of value is accepted as long as the
     * object is valid JSON; you can use `strings`, `numbers`, `booleans`, `arrays`, `objects`, or `null`.
     * The max length of the object is 25,000 characters. If you call `JSON.stringify` on your object, it
     * can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of
     * the following special characters: `!`, `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`,
     * `<`, `=`, `>`, `@`, `[`, `\`, `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found
     * in <a href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-
     * personalization#using-html-and-merge-variables-10" target="_blank">our guide to using html and merge
     * variables</a>. Depending on your <a href="https://dashboard.lob.com/#/settings/account"
     * target="_blank">Merge Variable strictness</a> setting, if you define variables in your HTML but do
     * not pass them here, you will either receive an error or the variable will render as an empty string.
     */
    public function getMergeVariables(): ?array
    {
        if (count($this->mergeVariables) == 0) {
            return null;
        }
        return $this->mergeVariables['value'];
    }

    /**
     * Sets Merge Variables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name": "Harry"}` to
     * render `Harry`. `merge_variables` must be an object. Any type of value is accepted as long as the
     * object is valid JSON; you can use `strings`, `numbers`, `booleans`, `arrays`, `objects`, or `null`.
     * The max length of the object is 25,000 characters. If you call `JSON.stringify` on your object, it
     * can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of
     * the following special characters: `!`, `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`,
     * `<`, `=`, `>`, `@`, `[`, `\`, `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found
     * in <a href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-
     * personalization#using-html-and-merge-variables-10" target="_blank">our guide to using html and merge
     * variables</a>. Depending on your <a href="https://dashboard.lob.com/#/settings/account"
     * target="_blank">Merge Variable strictness</a> setting, if you define variables in your HTML but do
     * not pass them here, you will either receive an error or the variable will render as an empty string.
     *
     * @maps merge_variables
     */
    public function setMergeVariables(?array $mergeVariables): void
    {
        $this->mergeVariables['value'] = $mergeVariables;
    }

    /**
     * Unsets Merge Variables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name": "Harry"}` to
     * render `Harry`. `merge_variables` must be an object. Any type of value is accepted as long as the
     * object is valid JSON; you can use `strings`, `numbers`, `booleans`, `arrays`, `objects`, or `null`.
     * The max length of the object is 25,000 characters. If you call `JSON.stringify` on your object, it
     * can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of
     * the following special characters: `!`, `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`,
     * `<`, `=`, `>`, `@`, `[`, `\`, `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found
     * in <a href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-
     * personalization#using-html-and-merge-variables-10" target="_blank">our guide to using html and merge
     * variables</a>. Depending on your <a href="https://dashboard.lob.com/#/settings/account"
     * target="_blank">Merge Variable strictness</a> setting, if you define variables in your HTML but do
     * not pass them here, you will either receive an error or the variable will render as an empty string.
     */
    public function unsetMergeVariables(): void
    {
        $this->mergeVariables = [];
    }

    /**
     * Returns Send Date.
     */
    public function getSendDate(): ?array
    {
        return $this->sendDate;
    }

    /**
     * Sets Send Date.
     *
     * @maps send_date
     */
    public function setSendDate(?array $sendDate): void
    {
        $this->sendDate = $sendDate;
    }

    /**
     * Returns Mail Type.
     */
    public function getMailType(): ?string
    {
        return $this->mailType;
    }

    /**
     * Sets Mail Type.
     *
     * @maps mail_type
     * @factory \LobLib\Models\MailType2Enum::checkValue
     */
    public function setMailType(?string $mailType): void
    {
        $this->mailType = $mailType;
    }

    /**
     * Returns Memo.
     * Text to include on the memo line of the check.
     */
    public function getMemo(): ?string
    {
        if (count($this->memo) == 0) {
            return null;
        }
        return $this->memo['value'];
    }

    /**
     * Sets Memo.
     * Text to include on the memo line of the check.
     *
     * @maps memo
     */
    public function setMemo(?string $memo): void
    {
        $this->memo['value'] = $memo;
    }

    /**
     * Unsets Memo.
     * Text to include on the memo line of the check.
     */
    public function unsetMemo(): void
    {
        $this->memo = [];
    }

    /**
     * Returns Check Number.
     * An integer that designates the check number.
     * If `check_number` is not provided, checks created from a new `bank_account` will start at `10000`
     * and increment with each check created with the `bank_account`.
     * A provided `check_number` overrides the defaults. Subsequent checks created with the same
     * `bank_account` will increment from the provided check number.
     */
    public function getCheckNumber(): ?int
    {
        return $this->checkNumber;
    }

    /**
     * Sets Check Number.
     * An integer that designates the check number.
     * If `check_number` is not provided, checks created from a new `bank_account` will start at `10000`
     * and increment with each check created with the `bank_account`.
     * A provided `check_number` overrides the defaults. Subsequent checks created with the same
     * `bank_account` will increment from the provided check number.
     *
     * @maps check_number
     */
    public function setCheckNumber(?int $checkNumber): void
    {
        $this->checkNumber = $checkNumber;
    }

    /**
     * Returns Message.
     * Max of 400 characters to be included at the bottom of the check page.
     */
    public function getMessage(): string
    {
        return $this->message;
    }

    /**
     * Sets Message.
     * Max of 400 characters to be included at the bottom of the check page.
     *
     * @required
     * @maps message
     */
    public function setMessage(string $message): void
    {
        $this->message = $message;
    }

    /**
     * Returns Use Type.
     */
    public function getUseType(): array
    {
        return $this->useType;
    }

    /**
     * Sets Use Type.
     *
     * @required
     * @maps use_type
     */
    public function setUseType(array $useType): void
    {
        $this->useType = $useType;
    }

    /**
     * Returns To.
     * Must either be an address ID or an inline object with correct address parameters. Checks cannot be
     * sent internationally (`address_country` must be `US`). The total string of the sum of
     * `address_line1` and `address_line2` must be no longer than 50 characters combined. If an object is
     * used, an address will be created, corrected, and standardized for free whenever possible using our
     * US Address Verification engine, and returned back with an ID. Depending on your <a href="https:
     * //dashboard.lob.com/#/settings/editions" target="_blank">Print & Mail Edition</a>, addresses may
     * also be run through [National Change of Address (NCOALink)](#tag/National-Change-of-Address). If an
     * address used does not meet your account’s <a href="https://dashboard.lob.com/#/settings/account"
     * target="_blank">US Mail Strictness Setting</a>, the request will fail. <a href="https://help.lob.
     * com/print-and-mail/all-about-addresses" target="_blank">More about verification of mailing
     * addresses</a>
     *
     * @return string|Addressobjwithnamedefined|Addressobjwithcompanydefined
     */
    public function getTo()
    {
        return $this->to;
    }

    /**
     * Sets To.
     * Must either be an address ID or an inline object with correct address parameters. Checks cannot be
     * sent internationally (`address_country` must be `US`). The total string of the sum of
     * `address_line1` and `address_line2` must be no longer than 50 characters combined. If an object is
     * used, an address will be created, corrected, and standardized for free whenever possible using our
     * US Address Verification engine, and returned back with an ID. Depending on your <a href="https:
     * //dashboard.lob.com/#/settings/editions" target="_blank">Print & Mail Edition</a>, addresses may
     * also be run through [National Change of Address (NCOALink)](#tag/National-Change-of-Address). If an
     * address used does not meet your account’s <a href="https://dashboard.lob.com/#/settings/account"
     * target="_blank">US Mail Strictness Setting</a>, the request will fail. <a href="https://help.lob.
     * com/print-and-mail/all-about-addresses" target="_blank">More about verification of mailing
     * addresses</a>
     *
     * @required
     * @maps to
     * @mapsBy oneOf(string,anyOf(Addressobjwithnamedefined,Addressobjwithcompanydefined))
     *
     * @param string|Addressobjwithnamedefined|Addressobjwithcompanydefined $to
     */
    public function setTo($to): void
    {
        $this->to = $to;
    }

    /**
     * Returns From.
     * Must either be an address ID or an inline object with correct address parameters. Must either be an
     * address ID or an inline object with correct address parameters. All addresses will be standardized
     * into uppercase without being modified by verification.
     *
     * @return string|InlineAddressUs
     */
    public function getFrom()
    {
        return $this->from;
    }

    /**
     * Sets From.
     * Must either be an address ID or an inline object with correct address parameters. Must either be an
     * address ID or an inline object with correct address parameters. All addresses will be standardized
     * into uppercase without being modified by verification.
     *
     * @required
     * @maps from
     * @mapsBy oneOf(string,InlineAddressUs)
     *
     * @param string|InlineAddressUs $from
     */
    public function setFrom($from): void
    {
        $this->from = $from;
    }

    /**
     * Returns Bank Account.
     */
    public function getBankAccount(): string
    {
        return $this->bankAccount;
    }

    /**
     * Sets Bank Account.
     *
     * @required
     * @maps bank_account
     */
    public function setBankAccount(string $bankAccount): void
    {
        $this->bankAccount = $bankAccount;
    }

    /**
     * Returns Amount.
     * The payment amount to be sent in US dollars. Amounts will be rounded to two decimal places.
     */
    public function getAmount(): float
    {
        return $this->amount;
    }

    /**
     * Sets Amount.
     * The payment amount to be sent in US dollars. Amounts will be rounded to two decimal places.
     *
     * @required
     * @maps amount
     */
    public function setAmount(float $amount): void
    {
        $this->amount = $amount;
    }

    /**
     * Returns Logo.
     * Accepts a remote URL or local file upload to an image to print (in grayscale) in the upper-left
     * corner of your check. Image requirements:
     *
     * * RGB or CMYK
     *
     * * square
     *
     * * minimum size: 100px x 100px
     *
     * * transparent backgrond
     *
     * * `png` or `jpg`
     */
    public function getLogo(): ?string
    {
        return $this->logo;
    }

    /**
     * Sets Logo.
     * Accepts a remote URL or local file upload to an image to print (in grayscale) in the upper-left
     * corner of your check. Image requirements:
     *
     * * RGB or CMYK
     *
     * * square
     *
     * * minimum size: 100px x 100px
     *
     * * transparent backgrond
     *
     * * `png` or `jpg`
     *
     * @maps logo
     * @mapsBy anyOf(oneOf(string),null)
     */
    public function setLogo(?string $logo): void
    {
        $this->logo = $logo;
    }

    /**
     * Returns Check Bottom.
     */
    public function getCheckBottom(): ?array
    {
        return $this->checkBottom;
    }

    /**
     * Sets Check Bottom.
     *
     * @maps check_bottom
     */
    public function setCheckBottom(?array $checkBottom): void
    {
        $this->checkBottom = $checkBottom;
    }

    /**
     * Returns Attachment.
     * A document to include with the check.
     *
     * Notes:
     * - HTML merge variables should not include delimiting whitespace.
     * - All pages of PDF, PNG, and JPGs must be sized at 8.5"x11" at 300 DPI, while supplied HTML will be
     * rendered and trimmed to as many 8.5"x11" pages as necessary.
     * - If a PDF is provided, it must be 6 pages or fewer.
     * - The attachment will be printed double-sided in black & white and will be included in the envelope
     * after the check page.
     * - Please follow these <a href="https://s3-us-west-2.amazonaws.com/public.lob.
     * com/assets/templates/check_attachment_template.pdf" target="_blank">design guidelines</a>.
     *
     * See <a href="https://lob.com/pricing/print-mail#compare" target="_blank">pricing</a> for extra costs
     * incurred. Need more help? Consult our [HTML examples](#section/HTML-Examples).
     */
    public function getAttachment(): ?string
    {
        return $this->attachment;
    }

    /**
     * Sets Attachment.
     * A document to include with the check.
     *
     * Notes:
     * - HTML merge variables should not include delimiting whitespace.
     * - All pages of PDF, PNG, and JPGs must be sized at 8.5"x11" at 300 DPI, while supplied HTML will be
     * rendered and trimmed to as many 8.5"x11" pages as necessary.
     * - If a PDF is provided, it must be 6 pages or fewer.
     * - The attachment will be printed double-sided in black & white and will be included in the envelope
     * after the check page.
     * - Please follow these <a href="https://s3-us-west-2.amazonaws.com/public.lob.
     * com/assets/templates/check_attachment_template.pdf" target="_blank">design guidelines</a>.
     *
     * See <a href="https://lob.com/pricing/print-mail#compare" target="_blank">pricing</a> for extra costs
     * incurred. Need more help? Consult our [HTML examples](#section/HTML-Examples).
     *
     * @maps attachment
     * @mapsBy anyOf(oneOf(string),null)
     */
    public function setAttachment(?string $attachment): void
    {
        $this->attachment = $attachment;
    }

    /**
     * Returns Billing Group Id.
     * An optional string with the billing group ID to tag your usage with. Is used for billing purposes.
     * Requires special activation to use. See <a href="#tag/Billing-Groups">Billing Group API</a> for more
     * information.
     */
    public function getBillingGroupId(): ?string
    {
        return $this->billingGroupId;
    }

    /**
     * Sets Billing Group Id.
     * An optional string with the billing group ID to tag your usage with. Is used for billing purposes.
     * Requires special activation to use. See <a href="#tag/Billing-Groups">Billing Group API</a> for more
     * information.
     *
     * @maps billing_group_id
     */
    public function setBillingGroupId(?string $billingGroupId): void
    {
        $this->billingGroupId = $billingGroupId;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->description)) {
            $json['description']      = $this->description['value'];
        }
        if (isset($this->metadata)) {
            $json['metadata']         = $this->metadata;
        }
        if (!empty($this->mergeVariables)) {
            $json['merge_variables']  = $this->mergeVariables['value'];
        }
        if (isset($this->sendDate)) {
            $json['send_date']        = $this->sendDate;
        }
        if (isset($this->mailType)) {
            $json['mail_type']        = MailType2Enum::checkValue($this->mailType);
        }
        if (!empty($this->memo)) {
            $json['memo']             = $this->memo['value'];
        }
        if (isset($this->checkNumber)) {
            $json['check_number']     = $this->checkNumber;
        }
        $json['message']              = $this->message;
        $json['use_type']             = $this->useType;
        $json['to']                   =
            ApiHelper::getJsonHelper()->verifyTypes(
                $this->to,
                'oneOf(string,anyOf(Addressobjwithnamedefined,Addressobjwithcompanydefined))'
            );
        $json['from']                 =
            ApiHelper::getJsonHelper()->verifyTypes(
                $this->from,
                'oneOf(string,InlineAddressUs)'
            );
        $json['bank_account']         = $this->bankAccount;
        $json['amount']               = $this->amount;
        if (isset($this->logo)) {
            $json['logo']             =
                ApiHelper::getJsonHelper()->verifyTypes(
                    $this->logo,
                    'anyOf(oneOf(string),null)'
                );
        }
        if (isset($this->checkBottom)) {
            $json['check_bottom']     = $this->checkBottom;
        }
        if (isset($this->attachment)) {
            $json['attachment']       =
                ApiHelper::getJsonHelper()->verifyTypes(
                    $this->attachment,
                    'anyOf(oneOf(string),null)'
                );
        }
        if (isset($this->billingGroupId)) {
            $json['billing_group_id'] = $this->billingGroupId;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
