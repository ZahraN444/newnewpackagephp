<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\Utils\DateTimeHelper;
use stdClass;

class Template implements \JsonSerializable
{
    /**
     * @var array
     */
    private $description = [];

    /**
     * @var string
     */
    private $id;

    /**
     * @var TemplateVersion[]
     */
    private $versions;

    /**
     * @var TemplateVersion
     */
    private $publishedVersion;

    /**
     * @var string|null
     */
    private $object;

    /**
     * @var array<string,string>|null
     */
    private $metadata;

    /**
     * @var \DateTime|null
     */
    private $dateCreated;

    /**
     * @var \DateTime|null
     */
    private $dateModified;

    /**
     * @var bool|null
     */
    private $deleted;

    /**
     * @param string $id
     * @param TemplateVersion[] $versions
     * @param TemplateVersion $publishedVersion
     */
    public function __construct(string $id, array $versions, TemplateVersion $publishedVersion)
    {
        $this->id = $id;
        $this->versions = $versions;
        $this->publishedVersion = $publishedVersion;
    }

    /**
     * Returns Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Id.
     * Unique identifier prefixed with `tmpl_`. ID of a saved [HTML template](#section/HTML-Templates).
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique identifier prefixed with `tmpl_`. ID of a saved [HTML template](#section/HTML-Templates).
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Versions.
     * An array of all non-deleted [version objects](#tag/Template-Versions) associated with the template.
     *
     * @return TemplateVersion[]
     */
    public function getVersions(): array
    {
        return $this->versions;
    }

    /**
     * Sets Versions.
     * An array of all non-deleted [version objects](#tag/Template-Versions) associated with the template.
     *
     * @required
     * @maps versions
     *
     * @param TemplateVersion[] $versions
     */
    public function setVersions(array $versions): void
    {
        $this->versions = $versions;
    }

    /**
     * Returns Published Version.
     */
    public function getPublishedVersion(): TemplateVersion
    {
        return $this->publishedVersion;
    }

    /**
     * Sets Published Version.
     *
     * @required
     * @maps published_version
     */
    public function setPublishedVersion(TemplateVersion $publishedVersion): void
    {
        $this->publishedVersion = $publishedVersion;
    }

    /**
     * Returns Object.
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * Sets Object.
     *
     * @maps object
     * @factory \LobLib\Models\Object12Enum::checkValue
     */
    public function setObject(?string $object): void
    {
        $this->object = $object;
    }

    /**
     * Returns Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @return array<string,string>|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @maps metadata
     *
     * @param array<string,string>|null $metadata
     */
    public function setMetadata(?array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     */
    public function getDateCreated(): ?\DateTime
    {
        return $this->dateCreated;
    }

    /**
     * Sets Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     *
     * @maps date_created
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateCreated(?\DateTime $dateCreated): void
    {
        $this->dateCreated = $dateCreated;
    }

    /**
     * Returns Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     */
    public function getDateModified(): ?\DateTime
    {
        return $this->dateModified;
    }

    /**
     * Sets Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     *
     * @maps date_modified
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateModified(?\DateTime $dateModified): void
    {
        $this->dateModified = $dateModified;
    }

    /**
     * Returns Deleted.
     * Only returned if the resource has been successfully deleted.
     */
    public function getDeleted(): ?bool
    {
        return $this->deleted;
    }

    /**
     * Sets Deleted.
     * Only returned if the resource has been successfully deleted.
     *
     * @maps deleted
     */
    public function setDeleted(?bool $deleted): void
    {
        $this->deleted = $deleted;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->description)) {
            $json['description']   = $this->description['value'];
        }
        $json['id']                = $this->id;
        $json['versions']          = $this->versions;
        $json['published_version'] = $this->publishedVersion;
        if (isset($this->object)) {
            $json['object']        = Object12Enum::checkValue($this->object);
        }
        if (isset($this->metadata)) {
            $json['metadata']      = $this->metadata;
        }
        if (isset($this->dateCreated)) {
            $json['date_created']  = DateTimeHelper::toRfc3339DateTime($this->dateCreated);
        }
        if (isset($this->dateModified)) {
            $json['date_modified'] = DateTimeHelper::toRfc3339DateTime($this->dateModified);
        }
        if (isset($this->deleted)) {
            $json['deleted']       = $this->deleted;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
