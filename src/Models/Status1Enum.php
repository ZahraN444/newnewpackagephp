<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use Core\Utils\CoreHelper;
use Exception;
use stdClass;

/**
 * The status level for the country. This represents the maximum level of
 * accuracy an input address can be verified to.
 *
 * * `LV4` - Verified. The input data is correct. All input data was able to match in databases.
 * * `LV3` - Verified. The input data is correct. All input data was able to match in databases
 * <em>after</em> some or all elements were standarized. The input data may also be using outdated city,
 * state, or country names.
 * * `LV2` - Verified. The input data is correct although some input data is unverifiable due to
 * incomplete data.
 * * `LV1` - Verified. The input data is acceptable but in an attempt to standarize user input, errors
 * were introduced.
 * * `LF4` - Fixed. The input data is matched and fixed. (Example: Brighon, UK -> Brighton, UK)
 * * `LF3` - Fixed. The input data is matched and fixed but some elements such as Subbuilding number
 * and house number cannot be checked.
 * * `LF2` - Fixed. The input data is matched but some elements such as Street cannot be checked.
 * * `LF1` - Fixed. The input data is acceptable but in an attempt to standarize user input, errors
 * were introduced.
 * * `LM4` - Missing Info. The input data cannot be corrected completely.
 * * `LM3` - Missing Info. The input data cannot be corrected completely and there were multiple
 * matches found in databases.
 * * `LM2` - Missing Info. The input data cannot be corrected completely and only some elements were
 * found.
 * * `LU1` - Unverified. The input data cannot be corrected or matched.
 */
class Status1Enum
{
    public const LV4 = 'LV4';

    public const LV3 = 'LV3';

    public const LV2 = 'LV2';

    public const LV1 = 'LV1';

    public const LF4 = 'LF4';

    public const LF3 = 'LF3';

    public const LF2 = 'LF2';

    public const LF1 = 'LF1';

    public const LM4 = 'LM4';

    public const LM3 = 'LM3';

    public const LM2 = 'LM2';

    public const LU1 = 'LU1';

    private const _ALL_VALUES = [
        self::LV4,
        self::LV3,
        self::LV2,
        self::LV1,
        self::LF4,
        self::LF3,
        self::LF2,
        self::LF1,
        self::LM4,
        self::LM3,
        self::LM2,
        self::LU1
    ];

    /**
     * Ensures that all the given values are present in this Enum.
     *
     * @param array|stdClass|null|string $value Value or a list/map of values to be checked
     *
     * @return array|null|string Input value(s), if all are a part of this Enum
     *
     * @throws Exception Throws exception if any given value is not in this Enum
     */
    public static function checkValue($value)
    {
        $value = json_decode(json_encode($value), true); // converts stdClass into array
        if (CoreHelper::checkValueOrValuesInList($value, self::_ALL_VALUES)) {
            return $value;
        }
        throw new Exception("$value is invalid for Status1Enum.");
    }
}
