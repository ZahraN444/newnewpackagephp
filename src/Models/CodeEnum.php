<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use Core\Utils\CoreHelper;
use Exception;
use stdClass;

/**
 * A pre-defined string identifying an error. Error codes fall into three categories:
 *
 * **GENERIC**
 * * `bad_request` - 422: an invalid request was made. See error message for details.
 * * `conflict` - 409/422: this operation would leave data in a conflicted state.
 * * `feature_limit_reached` - 403: the account has reached its resource limit and requires upgrading
 * to add more.
 * * `internal_server_error` - 500: an error has occured on Lob's servers. Please try request again.
 * * `invalid` - 422: an invalid request was made. See error message for details.
 * * `not_deletable` - 422: an attempt was made to delete a resource, but the resource cannot be
 * deleted.
 * * `not_found` - 404: the requested resource was not found.
 * * `request_timeout` - 408: the request took too long. Please try again.
 * * `service_unavailable` - 503: the Lob servers are temporarily unavailable. Please try agian.
 * * `unrecognized_endpoint` - 404: the requested endpoint doesn't exist.
 * * `unsupported_lob_version` - 422: an unsupported Lob API version was requested.
 *
 * **ADVANCED**
 * * `address_length_exceeds_limit` - 422: the sum of to.address_line1 and to.address_line2 cannot
 * surpass 50 characters.
 * * `bank_account_already_verified` - 422: the bank account has already been verified.
 * * `bank_error` - 422: there's an issue with the bank account.
 * * `billing_address_required` - 403: in order to create a live mail piece, your account needs to set
 * up a billing address.
 * * `custom_envelope_inventory_depleted` - 422: custom envelope inventory is depleted, and more will
 * need to be ordered.
 * * `deleted_bank_account` - 404: checks cannot be created with a deleted bank account.
 * * `failed_deliverability_strictness` - 422: the `to` address doesn't meet strictness requirements.
 * See <a href="https://dashboard.lob.com/#/settings/account" target="_blank">Account Settings</a> to
 * configure strictness.
 * * `file_pages_below_min` - 422: not enough pages.
 * * `file_pages_exceed_max` - 422: too many pages.
 * * `file_size_exceeds_limit` - 422: the file size is too large. See description for details.
 * * `foreign_return_address` - 422: the `from` address must be a US address.
 * * `inconsistent_page_dimensions` - 422: all pages of the input file must have the same dimensions.
 * * `invalid_bank_account` - 422: the provided bank routing number is invalid.
 * * `invalid_bank_account_verification` - 422: verification amounts do not match.
 * * `invalid_check_international` - 422: checks cannot be sent internationally.
 * * `invalid_country_covid` - 422: the postal service in the specified country is currently unable to
 * process the request due to COVID-19 restrictions.
 * * `invalid_file` - 422: the file is invalid.
 * * `invalid_file_dimensions` - 422: file dimensions are incorrect for the selected mail type.
 * * `invalid_file_download_time` - 422: file download from remote server took too long.
 * * `invalid_file_url` - 422: the file URL when creating a resource is invalid.
 * * `invalid_image_dpi` - 422: DPI must be at least 300.
 * * `invalid_international_feature` - 422: the specified product cannot be sent to the destination.
 * * `invalid_perforation_return_envelope` - 422: both `return_envelope` and `perforation` must be used
 * together.
 * * `invalid_template_html` - 422: the provided HTML is invalid.
 * * `mail_use_type_can_not_be_null` - 422: use_type must be one of "marketing" or "operational".
 * Alternatively, an admin can set the account default use type in Account Settings.
 * * `merge_variable_required` - 422: a required merge variable is missing.
 * * `merge_variable_whitespace` - 422: merge variable names cannot contain whitespace.
 * * `payment_method_unverified` - 401: you must have a verified bank account or credit card to submit
 * live requests.
 * * `pdf_encrypted` - 422: an encrypted PDF was provided.
 * * `special_characters_restricted` - 422: cannot use special characters for merge variable names.
 * * `unembedded_fonts` - 422: the provided PDF contains non-standard unembedded fonts. See description
 * for details.
 *
 * **AUTHENTICATION**
 * * `email_required` - 401: account must have a verified email address before creating live resources.
 * * `invalid_api_key` - 401/403: the API key is invalid.
 * * `publishable_key_not_allowed` - 403: the requested operation needs a secret key, not a publishable
 * key. See [API Keys](#section/API-Keys) for more information.
 * * `rate_limit_exceeded` - 429: requests were sent too quickly and must be slowed down.
 * * `unauthorized` - 401: the request isn't authorized.
 * * `unauthorized_token` - 401: token isn't authorized.
 */
class CodeEnum
{
    public const BAD_REQUEST = 'bad_request';

    public const CONFLICT = 'conflict';

    public const FEATURE_LIMIT_REACHED = 'feature_limit_reached';

    public const INTERNAL_SERVER_ERROR = 'internal_server_error';

    public const INVALID = 'invalid';

    public const NOT_DELETABLE = 'not_deletable';

    public const NOT_FOUND = 'not_found';

    public const REQUEST_TIMEOUT = 'request_timeout';

    public const SERVICE_UNAVAILABLE = 'service_unavailable';

    public const UNRECOGNIZED_ENDPOINT = 'unrecognized_endpoint';

    public const UNSUPPORTED_LOB_VERSION = 'unsupported_lob_version';

    public const ADDRESS_LENGTH_EXCEEDS_LIMIT = 'address_length_exceeds_limit';

    public const BANK_ACCOUNT_ALREADY_VERIFIED = 'bank_account_already_verified';

    public const BANK_ERROR = 'bank_error';

    public const BILLING_ADDRESS_REQUIRED = 'billing_address_required';

    public const CUSTOM_ENVELOPE_INVENTORY_DEPLETED = 'custom_envelope_inventory_depleted';

    public const DELETED_BANK_ACCOUNT = 'deleted_bank_account';

    public const FAILED_DELIVERABILITY_STRICTNESS = 'failed_deliverability_strictness';

    public const FILE_PAGES_BELOW_MIN = 'file_pages_below_min';

    public const FILE_PAGES_EXCEED_MAX = 'file_pages_exceed_max';

    public const FILE_SIZE_EXCEEDS_LIMIT = 'file_size_exceeds_limit';

    public const FOREIGN_RETURN_ADDRESS = 'foreign_return_address';

    public const INCONSISTENT_PAGE_DIMENSIONS = 'inconsistent_page_dimensions';

    public const INVALID_BANK_ACCOUNT = 'invalid_bank_account';

    public const INVALID_BANK_ACCOUNT_VERIFICATION = 'invalid_bank_account_verification';

    public const INVALID_CHECK_INTERNATIONAL = 'invalid_check_international';

    public const INVALID_COUNTRY_COVID = 'invalid_country_covid';

    public const INVALID_FILE = 'invalid_file';

    public const INVALID_FILE_DIMENSIONS = 'invalid_file_dimensions';

    public const INVALID_FILE_DOWNLOAD_TIME = 'invalid_file_download_time';

    public const INVALID_FILE_URL = 'invalid_file_url';

    public const INVALID_IMAGE_DPI = 'invalid_image_dpi';

    public const INVALID_INTERNATIONAL_FEATURE = 'invalid_international_feature';

    public const INVALID_PERFORATION_RETURN_ENVELOPE = 'invalid_perforation_return_envelope';

    public const INVALID_TEMPLATE_HTML = 'invalid_template_html';

    public const MAIL_USE_TYPE_CAN_NOT_BE_NULL = 'mail_use_type_can_not_be_null';

    public const MERGE_VARIABLE_REQUIRED = 'merge_variable_required';

    public const MERGE_VARIABLE_WHITESPACE = 'merge_variable_whitespace';

    public const PAYMENT_METHOD_UNVERIFIED = 'payment_method_unverified';

    public const PDF_ENCRYPTED = 'pdf_encrypted';

    public const SPECIAL_CHARACTERS_RESTRICTED = 'special_characters_restricted';

    public const UNEMBEDDED_FONTS = 'unembedded_fonts';

    public const EMAIL_REQUIRED = 'email_required';

    public const INVALID_API_KEY = 'invalid_api_key';

    public const PUBLISHABLE_KEY_NOT_ALLOWED = 'publishable_key_not_allowed';

    public const RATE_LIMIT_EXCEEDED = 'rate_limit_exceeded';

    public const UNAUTHORIZED = 'unauthorized';

    public const UNAUTHORIZED_TOKEN = 'unauthorized_token';

    private const _ALL_VALUES = [
        self::BAD_REQUEST,
        self::CONFLICT,
        self::FEATURE_LIMIT_REACHED,
        self::INTERNAL_SERVER_ERROR,
        self::INVALID,
        self::NOT_DELETABLE,
        self::NOT_FOUND,
        self::REQUEST_TIMEOUT,
        self::SERVICE_UNAVAILABLE,
        self::UNRECOGNIZED_ENDPOINT,
        self::UNSUPPORTED_LOB_VERSION,
        self::ADDRESS_LENGTH_EXCEEDS_LIMIT,
        self::BANK_ACCOUNT_ALREADY_VERIFIED,
        self::BANK_ERROR,
        self::BILLING_ADDRESS_REQUIRED,
        self::CUSTOM_ENVELOPE_INVENTORY_DEPLETED,
        self::DELETED_BANK_ACCOUNT,
        self::FAILED_DELIVERABILITY_STRICTNESS,
        self::FILE_PAGES_BELOW_MIN,
        self::FILE_PAGES_EXCEED_MAX,
        self::FILE_SIZE_EXCEEDS_LIMIT,
        self::FOREIGN_RETURN_ADDRESS,
        self::INCONSISTENT_PAGE_DIMENSIONS,
        self::INVALID_BANK_ACCOUNT,
        self::INVALID_BANK_ACCOUNT_VERIFICATION,
        self::INVALID_CHECK_INTERNATIONAL,
        self::INVALID_COUNTRY_COVID,
        self::INVALID_FILE,
        self::INVALID_FILE_DIMENSIONS,
        self::INVALID_FILE_DOWNLOAD_TIME,
        self::INVALID_FILE_URL,
        self::INVALID_IMAGE_DPI,
        self::INVALID_INTERNATIONAL_FEATURE,
        self::INVALID_PERFORATION_RETURN_ENVELOPE,
        self::INVALID_TEMPLATE_HTML,
        self::MAIL_USE_TYPE_CAN_NOT_BE_NULL,
        self::MERGE_VARIABLE_REQUIRED,
        self::MERGE_VARIABLE_WHITESPACE,
        self::PAYMENT_METHOD_UNVERIFIED,
        self::PDF_ENCRYPTED,
        self::SPECIAL_CHARACTERS_RESTRICTED,
        self::UNEMBEDDED_FONTS,
        self::EMAIL_REQUIRED,
        self::INVALID_API_KEY,
        self::PUBLISHABLE_KEY_NOT_ALLOWED,
        self::RATE_LIMIT_EXCEEDED,
        self::UNAUTHORIZED,
        self::UNAUTHORIZED_TOKEN
    ];

    /**
     * Ensures that all the given values are present in this Enum.
     *
     * @param array|stdClass|null|string $value Value or a list/map of values to be checked
     *
     * @return array|null|string Input value(s), if all are a part of this Enum
     *
     * @throws Exception Throws exception if any given value is not in this Enum
     */
    public static function checkValue($value)
    {
        $value = json_decode(json_encode($value), true); // converts stdClass into array
        if (CoreHelper::checkValueOrValuesInList($value, self::_ALL_VALUES)) {
            return $value;
        }
        throw new Exception("$value is invalid for CodeEnum.");
    }
}
