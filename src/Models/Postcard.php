<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\Utils\DateTimeHelper;
use stdClass;

class Postcard implements \JsonSerializable
{
    /**
     * @var array
     */
    private $description = [];

    /**
     * @var array<string,string>|null
     */
    private $metadata;

    /**
     * @var string|null
     */
    private $mailType;

    /**
     * @var array
     */
    private $mergeVariables = [];

    /**
     * @var array|null
     */
    private $sendDate;

    /**
     * @var string|null
     */
    private $size;

    /**
     * @var array
     */
    private $to;

    /**
     * @var string
     */
    private $carrier;

    /**
     * @var Thumbnail[]|null
     */
    private $thumbnails;

    /**
     * @var \DateTime|null
     */
    private $expectedDeliveryDate;

    /**
     * @var \DateTime|null
     */
    private $dateCreated;

    /**
     * @var \DateTime|null
     */
    private $dateModified;

    /**
     * @var bool|null
     */
    private $deleted;

    /**
     * @var AddressUs|null
     */
    private $from;

    /**
     * @var string
     */
    private $id;

    /**
     * @var string|null
     */
    private $frontTemplateId;

    /**
     * @var string|null
     */
    private $backTemplateId;

    /**
     * @var array
     */
    private $frontTemplateVersionId = [];

    /**
     * @var array
     */
    private $backTemplateVersionId = [];

    /**
     * @var array
     */
    private $trackingEvents = [];

    /**
     * @var string
     */
    private $url;

    /**
     * @var array
     */
    private $campaignId = [];

    /**
     * @var array|null
     */
    private $useType;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var array
     */
    private $failureReason = [];

    /**
     * @var string|null
     */
    private $object;

    /**
     * @param array $to
     * @param string $id
     * @param string $url
     */
    public function __construct(array $to, string $id, string $url)
    {
        $this->to = $to;
        $this->id = $id;
        $this->url = $url;
    }

    /**
     * Returns Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @return array<string,string>|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @maps metadata
     *
     * @param array<string,string>|null $metadata
     */
    public function setMetadata(?array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Mail Type.
     */
    public function getMailType(): ?string
    {
        return $this->mailType;
    }

    /**
     * Sets Mail Type.
     *
     * @maps mail_type
     * @factory \LobLib\Models\MailTypeEnum::checkValue
     */
    public function setMailType(?string $mailType): void
    {
        $this->mailType = $mailType;
    }

    /**
     * Returns Merge Variables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name": "Harry"}` to
     * render `Harry`. `merge_variables` must be an object. Any type of value is accepted as long as the
     * object is valid JSON; you can use `strings`, `numbers`, `booleans`, `arrays`, `objects`, or `null`.
     * The max length of the object is 25,000 characters. If you call `JSON.stringify` on your object, it
     * can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of
     * the following special characters: `!`, `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`,
     * `<`, `=`, `>`, `@`, `[`, `\`, `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found
     * in <a href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-
     * personalization#using-html-and-merge-variables-10" target="_blank">our guide to using html and merge
     * variables</a>. Depending on your <a href="https://dashboard.lob.com/#/settings/account"
     * target="_blank">Merge Variable strictness</a> setting, if you define variables in your HTML but do
     * not pass them here, you will either receive an error or the variable will render as an empty string.
     */
    public function getMergeVariables(): ?array
    {
        if (count($this->mergeVariables) == 0) {
            return null;
        }
        return $this->mergeVariables['value'];
    }

    /**
     * Sets Merge Variables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name": "Harry"}` to
     * render `Harry`. `merge_variables` must be an object. Any type of value is accepted as long as the
     * object is valid JSON; you can use `strings`, `numbers`, `booleans`, `arrays`, `objects`, or `null`.
     * The max length of the object is 25,000 characters. If you call `JSON.stringify` on your object, it
     * can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of
     * the following special characters: `!`, `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`,
     * `<`, `=`, `>`, `@`, `[`, `\`, `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found
     * in <a href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-
     * personalization#using-html-and-merge-variables-10" target="_blank">our guide to using html and merge
     * variables</a>. Depending on your <a href="https://dashboard.lob.com/#/settings/account"
     * target="_blank">Merge Variable strictness</a> setting, if you define variables in your HTML but do
     * not pass them here, you will either receive an error or the variable will render as an empty string.
     *
     * @maps merge_variables
     */
    public function setMergeVariables(?array $mergeVariables): void
    {
        $this->mergeVariables['value'] = $mergeVariables;
    }

    /**
     * Unsets Merge Variables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name": "Harry"}` to
     * render `Harry`. `merge_variables` must be an object. Any type of value is accepted as long as the
     * object is valid JSON; you can use `strings`, `numbers`, `booleans`, `arrays`, `objects`, or `null`.
     * The max length of the object is 25,000 characters. If you call `JSON.stringify` on your object, it
     * can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of
     * the following special characters: `!`, `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`,
     * `<`, `=`, `>`, `@`, `[`, `\`, `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found
     * in <a href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-
     * personalization#using-html-and-merge-variables-10" target="_blank">our guide to using html and merge
     * variables</a>. Depending on your <a href="https://dashboard.lob.com/#/settings/account"
     * target="_blank">Merge Variable strictness</a> setting, if you define variables in your HTML but do
     * not pass them here, you will either receive an error or the variable will render as an empty string.
     */
    public function unsetMergeVariables(): void
    {
        $this->mergeVariables = [];
    }

    /**
     * Returns Send Date.
     */
    public function getSendDate(): ?array
    {
        return $this->sendDate;
    }

    /**
     * Sets Send Date.
     *
     * @maps send_date
     */
    public function setSendDate(?array $sendDate): void
    {
        $this->sendDate = $sendDate;
    }

    /**
     * Returns Size.
     */
    public function getSize(): ?string
    {
        return $this->size;
    }

    /**
     * Sets Size.
     *
     * @maps size
     * @factory \LobLib\Models\PostcardSizeEnum::checkValue
     */
    public function setSize(?string $size): void
    {
        $this->size = $size;
    }

    /**
     * Returns To.
     */
    public function getTo(): array
    {
        return $this->to;
    }

    /**
     * Sets To.
     *
     * @required
     * @maps to
     */
    public function setTo(array $to): void
    {
        $this->to = $to;
    }

    /**
     * Returns Carrier.
     */
    public function getCarrier(): string
    {
        return $this->carrier;
    }

    /**
     * Sets Carrier.
     *
     * @maps carrier
     */
    public function setCarrier(string $carrier): void
    {
        $this->carrier = $carrier;
    }

    /**
     * Returns Thumbnails.
     *
     * @return Thumbnail[]|null
     */
    public function getThumbnails(): ?array
    {
        return $this->thumbnails;
    }

    /**
     * Sets Thumbnails.
     *
     * @maps thumbnails
     *
     * @param Thumbnail[]|null $thumbnails
     */
    public function setThumbnails(?array $thumbnails): void
    {
        $this->thumbnails = $thumbnails;
    }

    /**
     * Returns Expected Delivery Date.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its `send_date`.
     */
    public function getExpectedDeliveryDate(): ?\DateTime
    {
        return $this->expectedDeliveryDate;
    }

    /**
     * Sets Expected Delivery Date.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its `send_date`.
     *
     * @maps expected_delivery_date
     * @factory \LobLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setExpectedDeliveryDate(?\DateTime $expectedDeliveryDate): void
    {
        $this->expectedDeliveryDate = $expectedDeliveryDate;
    }

    /**
     * Returns Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     */
    public function getDateCreated(): ?\DateTime
    {
        return $this->dateCreated;
    }

    /**
     * Sets Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     *
     * @maps date_created
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateCreated(?\DateTime $dateCreated): void
    {
        $this->dateCreated = $dateCreated;
    }

    /**
     * Returns Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     */
    public function getDateModified(): ?\DateTime
    {
        return $this->dateModified;
    }

    /**
     * Sets Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     *
     * @maps date_modified
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateModified(?\DateTime $dateModified): void
    {
        $this->dateModified = $dateModified;
    }

    /**
     * Returns Deleted.
     * Only returned if the resource has been successfully deleted.
     */
    public function getDeleted(): ?bool
    {
        return $this->deleted;
    }

    /**
     * Sets Deleted.
     * Only returned if the resource has been successfully deleted.
     *
     * @maps deleted
     */
    public function setDeleted(?bool $deleted): void
    {
        $this->deleted = $deleted;
    }

    /**
     * Returns From.
     */
    public function getFrom(): ?AddressUs
    {
        return $this->from;
    }

    /**
     * Sets From.
     *
     * @maps from
     */
    public function setFrom(?AddressUs $from): void
    {
        $this->from = $from;
    }

    /**
     * Returns Id.
     * Unique identifier prefixed with `psc_`.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique identifier prefixed with `psc_`.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Front Template Id.
     * The unique ID of the HTML template used for the front of the postcard. Only filled out when the
     * request contains a valid postcard template ID.
     */
    public function getFrontTemplateId(): ?string
    {
        return $this->frontTemplateId;
    }

    /**
     * Sets Front Template Id.
     * The unique ID of the HTML template used for the front of the postcard. Only filled out when the
     * request contains a valid postcard template ID.
     *
     * @maps front_template_id
     */
    public function setFrontTemplateId(?string $frontTemplateId): void
    {
        $this->frontTemplateId = $frontTemplateId;
    }

    /**
     * Returns Back Template Id.
     * The unique ID of the HTML template used for the back of the postcard. Only filled out when the
     * request contains a valid postcard template ID.
     */
    public function getBackTemplateId(): ?string
    {
        return $this->backTemplateId;
    }

    /**
     * Sets Back Template Id.
     * The unique ID of the HTML template used for the back of the postcard. Only filled out when the
     * request contains a valid postcard template ID.
     *
     * @maps back_template_id
     */
    public function setBackTemplateId(?string $backTemplateId): void
    {
        $this->backTemplateId = $backTemplateId;
    }

    /**
     * Returns Front Template Version Id.
     * The unique ID of the specific version of the HTML template used for the front of the postcard. Only
     * filled out when the request contains a valid postcard template ID.
     */
    public function getFrontTemplateVersionId(): ?string
    {
        if (count($this->frontTemplateVersionId) == 0) {
            return null;
        }
        return $this->frontTemplateVersionId['value'];
    }

    /**
     * Sets Front Template Version Id.
     * The unique ID of the specific version of the HTML template used for the front of the postcard. Only
     * filled out when the request contains a valid postcard template ID.
     *
     * @maps front_template_version_id
     */
    public function setFrontTemplateVersionId(?string $frontTemplateVersionId): void
    {
        $this->frontTemplateVersionId['value'] = $frontTemplateVersionId;
    }

    /**
     * Unsets Front Template Version Id.
     * The unique ID of the specific version of the HTML template used for the front of the postcard. Only
     * filled out when the request contains a valid postcard template ID.
     */
    public function unsetFrontTemplateVersionId(): void
    {
        $this->frontTemplateVersionId = [];
    }

    /**
     * Returns Back Template Version Id.
     * The unique ID of the specific version of the HTML template used for the back of the postcard. Only
     * filled out when the request contains a valid postcard template ID.
     */
    public function getBackTemplateVersionId(): ?string
    {
        if (count($this->backTemplateVersionId) == 0) {
            return null;
        }
        return $this->backTemplateVersionId['value'];
    }

    /**
     * Sets Back Template Version Id.
     * The unique ID of the specific version of the HTML template used for the back of the postcard. Only
     * filled out when the request contains a valid postcard template ID.
     *
     * @maps back_template_version_id
     */
    public function setBackTemplateVersionId(?string $backTemplateVersionId): void
    {
        $this->backTemplateVersionId['value'] = $backTemplateVersionId;
    }

    /**
     * Unsets Back Template Version Id.
     * The unique ID of the specific version of the HTML template used for the back of the postcard. Only
     * filled out when the request contains a valid postcard template ID.
     */
    public function unsetBackTemplateVersionId(): void
    {
        $this->backTemplateVersionId = [];
    }

    /**
     * Returns Tracking Events.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for postcards
     * created in test mode.
     *
     * @return TrackingEventNormal[]|null
     */
    public function getTrackingEvents(): ?array
    {
        if (count($this->trackingEvents) == 0) {
            return null;
        }
        return $this->trackingEvents['value'];
    }

    /**
     * Sets Tracking Events.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for postcards
     * created in test mode.
     *
     * @maps tracking_events
     *
     * @param TrackingEventNormal[]|null $trackingEvents
     */
    public function setTrackingEvents(?array $trackingEvents): void
    {
        $this->trackingEvents['value'] = $trackingEvents;
    }

    /**
     * Unsets Tracking Events.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for postcards
     * created in test mode.
     */
    public function unsetTrackingEvents(): void
    {
        $this->trackingEvents = [];
    }

    /**
     * Returns Url.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to
     * prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated.
     */
    public function getUrl(): string
    {
        return $this->url;
    }

    /**
     * Sets Url.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to
     * prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated.
     *
     * @required
     * @maps url
     */
    public function setUrl(string $url): void
    {
        $this->url = $url;
    }

    /**
     * Returns Campaign Id.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     */
    public function getCampaignId(): ?string
    {
        if (count($this->campaignId) == 0) {
            return null;
        }
        return $this->campaignId['value'];
    }

    /**
     * Sets Campaign Id.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     *
     * @maps campaign_id
     */
    public function setCampaignId(?string $campaignId): void
    {
        $this->campaignId['value'] = $campaignId;
    }

    /**
     * Unsets Campaign Id.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     */
    public function unsetCampaignId(): void
    {
        $this->campaignId = [];
    }

    /**
     * Returns Use Type.
     */
    public function getUseType(): ?array
    {
        return $this->useType;
    }

    /**
     * Sets Use Type.
     *
     * @maps use_type
     */
    public function setUseType(?array $useType): void
    {
        $this->useType = $useType;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @maps status
     * @factory \LobLib\Models\ThestatusofthebuckslipEnum::checkValue
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Failure Reason.
     * A string describing the reason for failure if the postcard failed to render.
     */
    public function getFailureReason(): ?string
    {
        if (count($this->failureReason) == 0) {
            return null;
        }
        return $this->failureReason['value'];
    }

    /**
     * Sets Failure Reason.
     * A string describing the reason for failure if the postcard failed to render.
     *
     * @maps failure_reason
     */
    public function setFailureReason(?string $failureReason): void
    {
        $this->failureReason['value'] = $failureReason;
    }

    /**
     * Unsets Failure Reason.
     * A string describing the reason for failure if the postcard failed to render.
     */
    public function unsetFailureReason(): void
    {
        $this->failureReason = [];
    }

    /**
     * Returns Object.
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * Sets Object.
     *
     * @maps object
     * @factory \LobLib\Models\Object10Enum::checkValue
     */
    public function setObject(?string $object): void
    {
        $this->object = $object;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->description)) {
            $json['description']               = $this->description['value'];
        }
        if (isset($this->metadata)) {
            $json['metadata']                  = $this->metadata;
        }
        if (isset($this->mailType)) {
            $json['mail_type']                 = MailTypeEnum::checkValue($this->mailType);
        }
        if (!empty($this->mergeVariables)) {
            $json['merge_variables']           = $this->mergeVariables['value'];
        }
        if (isset($this->sendDate)) {
            $json['send_date']                 = $this->sendDate;
        }
        if (isset($this->size)) {
            $json['size']                      = PostcardSizeEnum::checkValue($this->size);
        }
        $json['to']                            = $this->to;
        $json['carrier']                       = $this->carrier;
        if (isset($this->thumbnails)) {
            $json['thumbnails']                = $this->thumbnails;
        }
        if (isset($this->expectedDeliveryDate)) {
            $json['expected_delivery_date']    = DateTimeHelper::toSimpleDate($this->expectedDeliveryDate);
        }
        if (isset($this->dateCreated)) {
            $json['date_created']              = DateTimeHelper::toRfc3339DateTime($this->dateCreated);
        }
        if (isset($this->dateModified)) {
            $json['date_modified']             = DateTimeHelper::toRfc3339DateTime($this->dateModified);
        }
        if (isset($this->deleted)) {
            $json['deleted']                   = $this->deleted;
        }
        if (isset($this->from)) {
            $json['from']                      = $this->from;
        }
        $json['id']                            = $this->id;
        $json['front_template_id']             = $this->frontTemplateId;
        $json['back_template_id']              = $this->backTemplateId;
        if (!empty($this->frontTemplateVersionId)) {
            $json['front_template_version_id'] = $this->frontTemplateVersionId['value'];
        }
        if (!empty($this->backTemplateVersionId)) {
            $json['back_template_version_id']  = $this->backTemplateVersionId['value'];
        }
        if (!empty($this->trackingEvents)) {
            $json['tracking_events']           = $this->trackingEvents['value'];
        }
        $json['url']                           = $this->url;
        if (!empty($this->campaignId)) {
            $json['campaign_id']               = $this->campaignId['value'];
        }
        if (isset($this->useType)) {
            $json['use_type']                  = $this->useType;
        }
        if (isset($this->status)) {
            $json['status']                    = ThestatusofthebuckslipEnum::checkValue($this->status);
        }
        if (!empty($this->failureReason)) {
            $json['failure_reason']            = $this->failureReason['value'];
        }
        if (isset($this->object)) {
            $json['object']                    = Object10Enum::checkValue($this->object);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
