<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\Utils\DateTimeHelper;
use stdClass;

class LetterGeneratedBase implements \JsonSerializable
{
    /**
     * @var array
     */
    private $to;

    /**
     * @var string
     */
    private $carrier;

    /**
     * @var Thumbnail[]|null
     */
    private $thumbnails;

    /**
     * @var \DateTime|null
     */
    private $expectedDeliveryDate;

    /**
     * @var \DateTime|null
     */
    private $dateCreated;

    /**
     * @var \DateTime|null
     */
    private $dateModified;

    /**
     * @var bool|null
     */
    private $deleted;

    /**
     * @var array
     */
    private $from;

    /**
     * @var string|null
     */
    private $url;

    /**
     * @var string
     */
    private $id;

    /**
     * @var string|null
     */
    private $templateId;

    /**
     * @var string|null
     */
    private $templateVersionId;

    /**
     * @var array
     */
    private $campaignId = [];

    /**
     * @var array
     */
    private $useType;

    /**
     * @var bool|null
     */
    private $fsc = false;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var array
     */
    private $failureReason = [];

    /**
     * @var string|null
     */
    private $object;

    /**
     * @param array $to
     * @param array $from
     * @param string $id
     * @param array $useType
     */
    public function __construct(array $to, array $from, string $id, array $useType)
    {
        $this->to = $to;
        $this->from = $from;
        $this->id = $id;
        $this->useType = $useType;
    }

    /**
     * Returns To.
     */
    public function getTo(): array
    {
        return $this->to;
    }

    /**
     * Sets To.
     *
     * @required
     * @maps to
     */
    public function setTo(array $to): void
    {
        $this->to = $to;
    }

    /**
     * Returns Carrier.
     */
    public function getCarrier(): string
    {
        return $this->carrier;
    }

    /**
     * Sets Carrier.
     *
     * @maps carrier
     */
    public function setCarrier(string $carrier): void
    {
        $this->carrier = $carrier;
    }

    /**
     * Returns Thumbnails.
     *
     * @return Thumbnail[]|null
     */
    public function getThumbnails(): ?array
    {
        return $this->thumbnails;
    }

    /**
     * Sets Thumbnails.
     *
     * @maps thumbnails
     *
     * @param Thumbnail[]|null $thumbnails
     */
    public function setThumbnails(?array $thumbnails): void
    {
        $this->thumbnails = $thumbnails;
    }

    /**
     * Returns Expected Delivery Date.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its `send_date`.
     */
    public function getExpectedDeliveryDate(): ?\DateTime
    {
        return $this->expectedDeliveryDate;
    }

    /**
     * Sets Expected Delivery Date.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its `send_date`.
     *
     * @maps expected_delivery_date
     * @factory \LobLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setExpectedDeliveryDate(?\DateTime $expectedDeliveryDate): void
    {
        $this->expectedDeliveryDate = $expectedDeliveryDate;
    }

    /**
     * Returns Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     */
    public function getDateCreated(): ?\DateTime
    {
        return $this->dateCreated;
    }

    /**
     * Sets Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     *
     * @maps date_created
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateCreated(?\DateTime $dateCreated): void
    {
        $this->dateCreated = $dateCreated;
    }

    /**
     * Returns Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     */
    public function getDateModified(): ?\DateTime
    {
        return $this->dateModified;
    }

    /**
     * Sets Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     *
     * @maps date_modified
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateModified(?\DateTime $dateModified): void
    {
        $this->dateModified = $dateModified;
    }

    /**
     * Returns Deleted.
     * Only returned if the resource has been successfully deleted.
     */
    public function getDeleted(): ?bool
    {
        return $this->deleted;
    }

    /**
     * Sets Deleted.
     * Only returned if the resource has been successfully deleted.
     *
     * @maps deleted
     */
    public function setDeleted(?bool $deleted): void
    {
        $this->deleted = $deleted;
    }

    /**
     * Returns From.
     */
    public function getFrom(): array
    {
        return $this->from;
    }

    /**
     * Sets From.
     *
     * @required
     * @maps from
     */
    public function setFrom(array $from): void
    {
        $this->from = $from;
    }

    /**
     * Returns Url.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to
     * prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated.
     */
    public function getUrl(): ?string
    {
        return $this->url;
    }

    /**
     * Sets Url.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to
     * prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated.
     *
     * @maps url
     */
    public function setUrl(?string $url): void
    {
        $this->url = $url;
    }

    /**
     * Returns Id.
     * Unique identifier prefixed with `ltr_`.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique identifier prefixed with `ltr_`.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Template Id.
     */
    public function getTemplateId(): ?string
    {
        return $this->templateId;
    }

    /**
     * Sets Template Id.
     *
     * @maps template_id
     */
    public function setTemplateId(?string $templateId): void
    {
        $this->templateId = $templateId;
    }

    /**
     * Returns Template Version Id.
     */
    public function getTemplateVersionId(): ?string
    {
        return $this->templateVersionId;
    }

    /**
     * Sets Template Version Id.
     *
     * @maps template_version_id
     */
    public function setTemplateVersionId(?string $templateVersionId): void
    {
        $this->templateVersionId = $templateVersionId;
    }

    /**
     * Returns Campaign Id.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     */
    public function getCampaignId(): ?string
    {
        if (count($this->campaignId) == 0) {
            return null;
        }
        return $this->campaignId['value'];
    }

    /**
     * Sets Campaign Id.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     *
     * @maps campaign_id
     */
    public function setCampaignId(?string $campaignId): void
    {
        $this->campaignId['value'] = $campaignId;
    }

    /**
     * Unsets Campaign Id.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     */
    public function unsetCampaignId(): void
    {
        $this->campaignId = [];
    }

    /**
     * Returns Use Type.
     */
    public function getUseType(): array
    {
        return $this->useType;
    }

    /**
     * Sets Use Type.
     *
     * @required
     * @maps use_type
     */
    public function setUseType(array $useType): void
    {
        $this->useType = $useType;
    }

    /**
     * Returns Fsc.
     * This is in beta. Contact support@lob.com or your account contact to learn more. Not available for
     * `A4` letter size.
     */
    public function getFsc(): ?bool
    {
        return $this->fsc;
    }

    /**
     * Sets Fsc.
     * This is in beta. Contact support@lob.com or your account contact to learn more. Not available for
     * `A4` letter size.
     *
     * @maps fsc
     */
    public function setFsc(?bool $fsc): void
    {
        $this->fsc = $fsc;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @maps status
     * @factory \LobLib\Models\ThestatusofthebuckslipEnum::checkValue
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Failure Reason.
     * A string describing the reason for failure if the letter failed to render.
     */
    public function getFailureReason(): ?string
    {
        if (count($this->failureReason) == 0) {
            return null;
        }
        return $this->failureReason['value'];
    }

    /**
     * Sets Failure Reason.
     * A string describing the reason for failure if the letter failed to render.
     *
     * @maps failure_reason
     */
    public function setFailureReason(?string $failureReason): void
    {
        $this->failureReason['value'] = $failureReason;
    }

    /**
     * Unsets Failure Reason.
     * A string describing the reason for failure if the letter failed to render.
     */
    public function unsetFailureReason(): void
    {
        $this->failureReason = [];
    }

    /**
     * Returns Object.
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * Sets Object.
     *
     * @maps object
     * @factory \LobLib\Models\Object8Enum::checkValue
     */
    public function setObject(?string $object): void
    {
        $this->object = $object;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['to']                         = $this->to;
        $json['carrier']                    = $this->carrier;
        if (isset($this->thumbnails)) {
            $json['thumbnails']             = $this->thumbnails;
        }
        if (isset($this->expectedDeliveryDate)) {
            $json['expected_delivery_date'] = DateTimeHelper::toSimpleDate($this->expectedDeliveryDate);
        }
        if (isset($this->dateCreated)) {
            $json['date_created']           = DateTimeHelper::toRfc3339DateTime($this->dateCreated);
        }
        if (isset($this->dateModified)) {
            $json['date_modified']          = DateTimeHelper::toRfc3339DateTime($this->dateModified);
        }
        if (isset($this->deleted)) {
            $json['deleted']                = $this->deleted;
        }
        $json['from']                       = $this->from;
        if (isset($this->url)) {
            $json['url']                    = $this->url;
        }
        $json['id']                         = $this->id;
        if (isset($this->templateId)) {
            $json['template_id']            = $this->templateId;
        }
        if (isset($this->templateVersionId)) {
            $json['template_version_id']    = $this->templateVersionId;
        }
        if (!empty($this->campaignId)) {
            $json['campaign_id']            = $this->campaignId['value'];
        }
        $json['use_type']                   = $this->useType;
        if (isset($this->fsc)) {
            $json['fsc']                    = $this->fsc;
        }
        if (isset($this->status)) {
            $json['status']                 = ThestatusofthebuckslipEnum::checkValue($this->status);
        }
        if (!empty($this->failureReason)) {
            $json['failure_reason']         = $this->failureReason['value'];
        }
        if (isset($this->object)) {
            $json['object']                 = Object8Enum::checkValue($this->object);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
