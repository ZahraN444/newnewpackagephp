<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use stdClass;

class Datum implements \JsonSerializable
{
    /**
     * @var float|null
     */
    private $rowNumber;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var array
     */
    private $errorMessage = [];

    /**
     * @var array
     */
    private $mailpieceId = [];

    /**
     * @var array|null
     */
    private $originalData;

    /**
     * Returns Row Number.
     * The row number of the csv file containing this data.
     */
    public function getRowNumber(): ?float
    {
        return $this->rowNumber;
    }

    /**
     * Sets Row Number.
     * The row number of the csv file containing this data.
     *
     * @maps rowNumber
     */
    public function setRowNumber(?float $rowNumber): void
    {
        $this->rowNumber = $rowNumber;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @maps status
     * @factory \LobLib\Models\Status4Enum::checkValue
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Error Message.
     * The error message detailing the reason why processing the line item failed.
     */
    public function getErrorMessage(): ?string
    {
        if (count($this->errorMessage) == 0) {
            return null;
        }
        return $this->errorMessage['value'];
    }

    /**
     * Sets Error Message.
     * The error message detailing the reason why processing the line item failed.
     *
     * @maps errorMessage
     */
    public function setErrorMessage(?string $errorMessage): void
    {
        $this->errorMessage['value'] = $errorMessage;
    }

    /**
     * Unsets Error Message.
     * The error message detailing the reason why processing the line item failed.
     */
    public function unsetErrorMessage(): void
    {
        $this->errorMessage = [];
    }

    /**
     * Returns Mailpiece Id.
     * The mailpiece id created from the line item when it was validated.
     */
    public function getMailpieceId(): ?string
    {
        if (count($this->mailpieceId) == 0) {
            return null;
        }
        return $this->mailpieceId['value'];
    }

    /**
     * Sets Mailpiece Id.
     * The mailpiece id created from the line item when it was validated.
     *
     * @maps mailpieceId
     */
    public function setMailpieceId(?string $mailpieceId): void
    {
        $this->mailpieceId['value'] = $mailpieceId;
    }

    /**
     * Unsets Mailpiece Id.
     * The mailpiece id created from the line item when it was validated.
     */
    public function unsetMailpieceId(): void
    {
        $this->mailpieceId = [];
    }

    /**
     * Returns Original Data.
     * Key-value pairs where each key is the column header and each value is the value of the column for
     * the row.
     */
    public function getOriginalData(): ?array
    {
        return $this->originalData;
    }

    /**
     * Sets Original Data.
     * Key-value pairs where each key is the column header and each value is the value of the column for
     * the row.
     *
     * @maps originalData
     */
    public function setOriginalData(?array $originalData): void
    {
        $this->originalData = $originalData;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->rowNumber)) {
            $json['rowNumber']    = $this->rowNumber;
        }
        if (isset($this->status)) {
            $json['status']       = Status4Enum::checkValue($this->status);
        }
        if (!empty($this->errorMessage)) {
            $json['errorMessage'] = $this->errorMessage['value'];
        }
        if (!empty($this->mailpieceId)) {
            $json['mailpieceId']  = $this->mailpieceId['value'];
        }
        if (isset($this->originalData)) {
            $json['originalData'] = $this->originalData;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
