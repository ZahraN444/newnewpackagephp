<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\Utils\DateTimeHelper;
use stdClass;

class BankAccount implements \JsonSerializable
{
    /**
     * @var array
     */
    private $description = [];

    /**
     * @var string
     */
    private $routingNumber;

    /**
     * @var string
     */
    private $accountNumber;

    /**
     * @var string
     */
    private $accountType;

    /**
     * @var string
     */
    private $signatory;

    /**
     * @var string|null
     */
    private $checkTemplate;

    /**
     * @var string|null
     */
    private $fractionalRoutingNumber;

    /**
     * @var string|null
     */
    private $city;

    /**
     * @var string|null
     */
    private $state;

    /**
     * @var string|null
     */
    private $zipcode;

    /**
     * @var array<string,string>|null
     */
    private $metadata;

    /**
     * @var \DateTime
     */
    private $dateCreated;

    /**
     * @var \DateTime
     */
    private $dateModified;

    /**
     * @var bool|null
     */
    private $deleted;

    /**
     * @var string
     */
    private $object;

    /**
     * @var string
     */
    private $id;

    /**
     * @var array
     */
    private $signatureUrl = [];

    /**
     * @var string|null
     */
    private $bankName;

    /**
     * @var bool|null
     */
    private $verified = false;

    /**
     * @param string $routingNumber
     * @param string $accountNumber
     * @param string $accountType
     * @param string $signatory
     * @param \DateTime $dateCreated
     * @param \DateTime $dateModified
     * @param string $id
     */
    public function __construct(
        string $routingNumber,
        string $accountNumber,
        string $accountType,
        string $signatory,
        \DateTime $dateCreated,
        \DateTime $dateModified,
        string $id
    ) {
        $this->routingNumber = $routingNumber;
        $this->accountNumber = $accountNumber;
        $this->accountType = $accountType;
        $this->signatory = $signatory;
        $this->dateCreated = $dateCreated;
        $this->dateModified = $dateModified;
        $this->id = $id;
    }

    /**
     * Returns Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Routing Number.
     * Must be a <a href="https://www.frbservices.org/index.html" target="_blank">valid US routing
     * number</a>.
     */
    public function getRoutingNumber(): string
    {
        return $this->routingNumber;
    }

    /**
     * Sets Routing Number.
     * Must be a <a href="https://www.frbservices.org/index.html" target="_blank">valid US routing
     * number</a>.
     *
     * @required
     * @maps routing_number
     */
    public function setRoutingNumber(string $routingNumber): void
    {
        $this->routingNumber = $routingNumber;
    }

    /**
     * Returns Account Number.
     */
    public function getAccountNumber(): string
    {
        return $this->accountNumber;
    }

    /**
     * Sets Account Number.
     *
     * @required
     * @maps account_number
     */
    public function setAccountNumber(string $accountNumber): void
    {
        $this->accountNumber = $accountNumber;
    }

    /**
     * Returns Account Type.
     */
    public function getAccountType(): string
    {
        return $this->accountType;
    }

    /**
     * Sets Account Type.
     *
     * @required
     * @maps account_type
     * @factory \LobLib\Models\AccountTypeEnum::checkValue
     */
    public function setAccountType(string $accountType): void
    {
        $this->accountType = $accountType;
    }

    /**
     * Returns Signatory.
     * The signatory associated with your account. This name will be printed on checks created with this
     * bank account. If you prefer to use a custom signature image on your checks instead, please create
     * your bank account from the <a href="https://dashboard.lob.com/#/login" target="_blank">Dashboard</a>.
     */
    public function getSignatory(): string
    {
        return $this->signatory;
    }

    /**
     * Sets Signatory.
     * The signatory associated with your account. This name will be printed on checks created with this
     * bank account. If you prefer to use a custom signature image on your checks instead, please create
     * your bank account from the <a href="https://dashboard.lob.com/#/login" target="_blank">Dashboard</a>.
     *
     * @required
     * @maps signatory
     */
    public function setSignatory(string $signatory): void
    {
        $this->signatory = $signatory;
    }

    /**
     * Returns Check Template.
     */
    public function getCheckTemplate(): ?string
    {
        return $this->checkTemplate;
    }

    /**
     * Sets Check Template.
     *
     * @maps check_template
     * @factory \LobLib\Models\CheckTemplateEnum::checkValue
     */
    public function setCheckTemplate(?string $checkTemplate): void
    {
        $this->checkTemplate = $checkTemplate;
    }

    /**
     * Returns Fractional Routing Number.
     * The fractional routing number for your home bank account. Required for the `jpm` check template only.
     * Please contact a bank representative if you do not know the fractional routing number associated
     * with your home bank institution.
     */
    public function getFractionalRoutingNumber(): ?string
    {
        return $this->fractionalRoutingNumber;
    }

    /**
     * Sets Fractional Routing Number.
     * The fractional routing number for your home bank account. Required for the `jpm` check template only.
     * Please contact a bank representative if you do not know the fractional routing number associated
     * with your home bank institution.
     *
     * @maps fractional_routing_number
     */
    public function setFractionalRoutingNumber(?string $fractionalRoutingNumber): void
    {
        $this->fractionalRoutingNumber = $fractionalRoutingNumber;
    }

    /**
     * Returns City.
     * The city associated with your home bank account. Required for the `jpm` check template only. Please
     * contact a bank representative if you do not know the city associated with your home bank institution.
     */
    public function getCity(): ?string
    {
        return $this->city;
    }

    /**
     * Sets City.
     * The city associated with your home bank account. Required for the `jpm` check template only. Please
     * contact a bank representative if you do not know the city associated with your home bank institution.
     *
     * @maps city
     */
    public function setCity(?string $city): void
    {
        $this->city = $city;
    }

    /**
     * Returns State.
     * The state associated with your home bank account. Required for the `jpm` check template only. Please
     * contact a bank representative if you do not know the state associated with your home bank
     * institution.
     */
    public function getState(): ?string
    {
        return $this->state;
    }

    /**
     * Sets State.
     * The state associated with your home bank account. Required for the `jpm` check template only. Please
     * contact a bank representative if you do not know the state associated with your home bank
     * institution.
     *
     * @maps state
     */
    public function setState(?string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns Zipcode.
     * The zipcode associated with your home bank account. Required for the `jpm` check template only.
     * Please contact a bank representative if you do not know the zipcode associated with your home bank
     * institution.
     */
    public function getZipcode(): ?string
    {
        return $this->zipcode;
    }

    /**
     * Sets Zipcode.
     * The zipcode associated with your home bank account. Required for the `jpm` check template only.
     * Please contact a bank representative if you do not know the zipcode associated with your home bank
     * institution.
     *
     * @maps zipcode
     */
    public function setZipcode(?string $zipcode): void
    {
        $this->zipcode = $zipcode;
    }

    /**
     * Returns Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @return array<string,string>|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @maps metadata
     *
     * @param array<string,string>|null $metadata
     */
    public function setMetadata(?array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     */
    public function getDateCreated(): \DateTime
    {
        return $this->dateCreated;
    }

    /**
     * Sets Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     *
     * @required
     * @maps date_created
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateCreated(\DateTime $dateCreated): void
    {
        $this->dateCreated = $dateCreated;
    }

    /**
     * Returns Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     */
    public function getDateModified(): \DateTime
    {
        return $this->dateModified;
    }

    /**
     * Sets Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     *
     * @required
     * @maps date_modified
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateModified(\DateTime $dateModified): void
    {
        $this->dateModified = $dateModified;
    }

    /**
     * Returns Deleted.
     * Only returned if the resource has been successfully deleted.
     */
    public function getDeleted(): ?bool
    {
        return $this->deleted;
    }

    /**
     * Sets Deleted.
     * Only returned if the resource has been successfully deleted.
     *
     * @maps deleted
     */
    public function setDeleted(?bool $deleted): void
    {
        $this->deleted = $deleted;
    }

    /**
     * Returns Object.
     * Value is resource type.
     */
    public function getObject(): string
    {
        return $this->object;
    }

    /**
     * Sets Object.
     * Value is resource type.
     *
     * @maps object
     */
    public function setObject(string $object): void
    {
        $this->object = $object;
    }

    /**
     * Returns Id.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Signature Url.
     */
    public function getSignatureUrl(): ?string
    {
        if (count($this->signatureUrl) == 0) {
            return null;
        }
        return $this->signatureUrl['value'];
    }

    /**
     * Sets Signature Url.
     *
     * @maps signature_url
     */
    public function setSignatureUrl(?string $signatureUrl): void
    {
        $this->signatureUrl['value'] = $signatureUrl;
    }

    /**
     * Unsets Signature Url.
     */
    public function unsetSignatureUrl(): void
    {
        $this->signatureUrl = [];
    }

    /**
     * Returns Bank Name.
     * The name of the bank based on the provided routing number, e.g. `JPMORGAN CHASE BANK`.
     */
    public function getBankName(): ?string
    {
        return $this->bankName;
    }

    /**
     * Sets Bank Name.
     * The name of the bank based on the provided routing number, e.g. `JPMORGAN CHASE BANK`.
     *
     * @maps bank_name
     */
    public function setBankName(?string $bankName): void
    {
        $this->bankName = $bankName;
    }

    /**
     * Returns Verified.
     * A bank account must be verified before a check can be created. More info
     * [here](#operation/bank_account_verify).
     */
    public function getVerified(): ?bool
    {
        return $this->verified;
    }

    /**
     * Sets Verified.
     * A bank account must be verified before a check can be created. More info
     * [here](#operation/bank_account_verify).
     *
     * @maps verified
     */
    public function setVerified(?bool $verified): void
    {
        $this->verified = $verified;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->description)) {
            $json['description']               = $this->description['value'];
        }
        $json['routing_number']                = $this->routingNumber;
        $json['account_number']                = $this->accountNumber;
        $json['account_type']                  = AccountTypeEnum::checkValue($this->accountType);
        $json['signatory']                     = $this->signatory;
        if (isset($this->checkTemplate)) {
            $json['check_template']            = CheckTemplateEnum::checkValue($this->checkTemplate);
        }
        if (isset($this->fractionalRoutingNumber)) {
            $json['fractional_routing_number'] = $this->fractionalRoutingNumber;
        }
        if (isset($this->city)) {
            $json['city']                      = $this->city;
        }
        if (isset($this->state)) {
            $json['state']                     = $this->state;
        }
        if (isset($this->zipcode)) {
            $json['zipcode']                   = $this->zipcode;
        }
        if (isset($this->metadata)) {
            $json['metadata']                  = $this->metadata;
        }
        $json['date_created']                  = DateTimeHelper::toRfc3339DateTime($this->dateCreated);
        $json['date_modified']                 = DateTimeHelper::toRfc3339DateTime($this->dateModified);
        if (isset($this->deleted)) {
            $json['deleted']                   = $this->deleted;
        }
        $json['object']                        = $this->object;
        $json['id']                            = $this->id;
        if (!empty($this->signatureUrl)) {
            $json['signature_url']             = $this->signatureUrl['value'];
        }
        if (isset($this->bankName)) {
            $json['bank_name']                 = $this->bankName;
        }
        if (isset($this->verified)) {
            $json['verified']                  = $this->verified;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
