<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\Utils\DateTimeHelper;
use stdClass;

class Certified implements \JsonSerializable
{
    /**
     * @var string
     */
    private $extraService;

    /**
     * @var array
     */
    private $trackingNumber = [];

    /**
     * @var TrackingEventCertified[]
     */
    private $trackingEvents;

    /**
     * @var array|null
     */
    private $returnAddress;

    /**
     * @var array
     */
    private $description = [];

    /**
     * @var array<string,string>|null
     */
    private $metadata;

    /**
     * @var array
     */
    private $mergeVariables = [];

    /**
     * @var array|null
     */
    private $sendDate;

    /**
     * @var string|null
     */
    private $mailType;

    /**
     * @var bool
     */
    private $color;

    /**
     * @var bool|null
     */
    private $doubleSided = true;

    /**
     * @var string|null
     */
    private $addressPlacement;

    /**
     * @var array|null
     */
    private $returnEnvelope;

    /**
     * @var array
     */
    private $perforatedPage = [];

    /**
     * @var array|null
     */
    private $customEnvelope;

    /**
     * @var array
     */
    private $to;

    /**
     * @var string
     */
    private $carrier;

    /**
     * @var Thumbnail[]|null
     */
    private $thumbnails;

    /**
     * @var \DateTime|null
     */
    private $expectedDeliveryDate;

    /**
     * @var \DateTime|null
     */
    private $dateCreated;

    /**
     * @var \DateTime|null
     */
    private $dateModified;

    /**
     * @var bool|null
     */
    private $deleted;

    /**
     * @var array
     */
    private $from;

    /**
     * @var string|null
     */
    private $url;

    /**
     * @var string
     */
    private $id;

    /**
     * @var string|null
     */
    private $templateId;

    /**
     * @var string|null
     */
    private $templateVersionId;

    /**
     * @var array
     */
    private $campaignId = [];

    /**
     * @var array
     */
    private $useType;

    /**
     * @var bool|null
     */
    private $fsc = false;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var array
     */
    private $failureReason = [];

    /**
     * @var string|null
     */
    private $object;

    /**
     * @param string $extraService
     * @param TrackingEventCertified[] $trackingEvents
     * @param bool $color
     * @param array $to
     * @param array $from
     * @param string $id
     * @param array $useType
     */
    public function __construct(
        string $extraService,
        array $trackingEvents,
        bool $color,
        array $to,
        array $from,
        string $id,
        array $useType
    ) {
        $this->extraService = $extraService;
        $this->trackingEvents = $trackingEvents;
        $this->color = $color;
        $this->to = $to;
        $this->from = $from;
        $this->id = $id;
        $this->useType = $useType;
    }

    /**
     * Returns Extra Service.
     */
    public function getExtraService(): string
    {
        return $this->extraService;
    }

    /**
     * Sets Extra Service.
     *
     * @required
     * @maps extra_service
     * @factory \LobLib\Models\ExtraService1Enum::checkValue
     */
    public function setExtraService(string $extraService): void
    {
        $this->extraService = $extraService;
    }

    /**
     * Returns Tracking Number.
     * The tracking number will be here immediately upon creation.
     * Dummy tracking numbers are created in test mode.
     */
    public function getTrackingNumber(): ?string
    {
        if (count($this->trackingNumber) == 0) {
            return null;
        }
        return $this->trackingNumber['value'];
    }

    /**
     * Sets Tracking Number.
     * The tracking number will be here immediately upon creation.
     * Dummy tracking numbers are created in test mode.
     *
     * @maps tracking_number
     */
    public function setTrackingNumber(?string $trackingNumber): void
    {
        $this->trackingNumber['value'] = $trackingNumber;
    }

    /**
     * Unsets Tracking Number.
     * The tracking number will be here immediately upon creation.
     * Dummy tracking numbers are created in test mode.
     */
    public function unsetTrackingNumber(): void
    {
        $this->trackingNumber = [];
    }

    /**
     * Returns Tracking Events.
     * An array of certified tracking events ordered by ascending `time`. Not populated in test mode.
     *
     * @return TrackingEventCertified[]
     */
    public function getTrackingEvents(): array
    {
        return $this->trackingEvents;
    }

    /**
     * Sets Tracking Events.
     * An array of certified tracking events ordered by ascending `time`. Not populated in test mode.
     *
     * @required
     * @maps tracking_events
     *
     * @param TrackingEventCertified[] $trackingEvents
     */
    public function setTrackingEvents(array $trackingEvents): void
    {
        $this->trackingEvents = $trackingEvents;
    }

    /**
     * Returns Return Address.
     */
    public function getReturnAddress(): ?array
    {
        return $this->returnAddress;
    }

    /**
     * Sets Return Address.
     *
     * @maps return_address
     */
    public function setReturnAddress(?array $returnAddress): void
    {
        $this->returnAddress = $returnAddress;
    }

    /**
     * Returns Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @return array<string,string>|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @maps metadata
     *
     * @param array<string,string>|null $metadata
     */
    public function setMetadata(?array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Merge Variables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name": "Harry"}` to
     * render `Harry`. `merge_variables` must be an object. Any type of value is accepted as long as the
     * object is valid JSON; you can use `strings`, `numbers`, `booleans`, `arrays`, `objects`, or `null`.
     * The max length of the object is 25,000 characters. If you call `JSON.stringify` on your object, it
     * can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of
     * the following special characters: `!`, `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`,
     * `<`, `=`, `>`, `@`, `[`, `\`, `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found
     * in <a href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-
     * personalization#using-html-and-merge-variables-10" target="_blank">our guide to using html and merge
     * variables</a>. Depending on your <a href="https://dashboard.lob.com/#/settings/account"
     * target="_blank">Merge Variable strictness</a> setting, if you define variables in your HTML but do
     * not pass them here, you will either receive an error or the variable will render as an empty string.
     */
    public function getMergeVariables(): ?array
    {
        if (count($this->mergeVariables) == 0) {
            return null;
        }
        return $this->mergeVariables['value'];
    }

    /**
     * Sets Merge Variables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name": "Harry"}` to
     * render `Harry`. `merge_variables` must be an object. Any type of value is accepted as long as the
     * object is valid JSON; you can use `strings`, `numbers`, `booleans`, `arrays`, `objects`, or `null`.
     * The max length of the object is 25,000 characters. If you call `JSON.stringify` on your object, it
     * can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of
     * the following special characters: `!`, `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`,
     * `<`, `=`, `>`, `@`, `[`, `\`, `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found
     * in <a href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-
     * personalization#using-html-and-merge-variables-10" target="_blank">our guide to using html and merge
     * variables</a>. Depending on your <a href="https://dashboard.lob.com/#/settings/account"
     * target="_blank">Merge Variable strictness</a> setting, if you define variables in your HTML but do
     * not pass them here, you will either receive an error or the variable will render as an empty string.
     *
     * @maps merge_variables
     */
    public function setMergeVariables(?array $mergeVariables): void
    {
        $this->mergeVariables['value'] = $mergeVariables;
    }

    /**
     * Unsets Merge Variables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name": "Harry"}` to
     * render `Harry`. `merge_variables` must be an object. Any type of value is accepted as long as the
     * object is valid JSON; you can use `strings`, `numbers`, `booleans`, `arrays`, `objects`, or `null`.
     * The max length of the object is 25,000 characters. If you call `JSON.stringify` on your object, it
     * can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of
     * the following special characters: `!`, `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`,
     * `<`, `=`, `>`, `@`, `[`, `\`, `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found
     * in <a href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-
     * personalization#using-html-and-merge-variables-10" target="_blank">our guide to using html and merge
     * variables</a>. Depending on your <a href="https://dashboard.lob.com/#/settings/account"
     * target="_blank">Merge Variable strictness</a> setting, if you define variables in your HTML but do
     * not pass them here, you will either receive an error or the variable will render as an empty string.
     */
    public function unsetMergeVariables(): void
    {
        $this->mergeVariables = [];
    }

    /**
     * Returns Send Date.
     */
    public function getSendDate(): ?array
    {
        return $this->sendDate;
    }

    /**
     * Sets Send Date.
     *
     * @maps send_date
     */
    public function setSendDate(?array $sendDate): void
    {
        $this->sendDate = $sendDate;
    }

    /**
     * Returns Mail Type.
     */
    public function getMailType(): ?string
    {
        return $this->mailType;
    }

    /**
     * Sets Mail Type.
     *
     * @maps mail_type
     * @factory \LobLib\Models\MailTypeEnum::checkValue
     */
    public function setMailType(?string $mailType): void
    {
        $this->mailType = $mailType;
    }

    /**
     * Returns Color.
     * Set this key to `true` if you would like to print in color. Set to `false` if you would like to
     * print in black and white.
     */
    public function getColor(): bool
    {
        return $this->color;
    }

    /**
     * Sets Color.
     * Set this key to `true` if you would like to print in color. Set to `false` if you would like to
     * print in black and white.
     *
     * @required
     * @maps color
     */
    public function setColor(bool $color): void
    {
        $this->color = $color;
    }

    /**
     * Returns Double Sided.
     * Set this attribute to `true` for double sided printing, or `false` for for single sided printing.
     * Defaults to `true`.
     */
    public function getDoubleSided(): ?bool
    {
        return $this->doubleSided;
    }

    /**
     * Sets Double Sided.
     * Set this attribute to `true` for double sided printing, or `false` for for single sided printing.
     * Defaults to `true`.
     *
     * @maps double_sided
     */
    public function setDoubleSided(?bool $doubleSided): void
    {
        $this->doubleSided = $doubleSided;
    }

    /**
     * Returns Address Placement.
     */
    public function getAddressPlacement(): ?string
    {
        return $this->addressPlacement;
    }

    /**
     * Sets Address Placement.
     *
     * @maps address_placement
     * @factory \LobLib\Models\AddressPlacementEnum::checkValue
     */
    public function setAddressPlacement(?string $addressPlacement): void
    {
        $this->addressPlacement = $addressPlacement;
    }

    /**
     * Returns Return Envelope.
     */
    public function getReturnEnvelope(): ?array
    {
        return $this->returnEnvelope;
    }

    /**
     * Sets Return Envelope.
     *
     * @maps return_envelope
     */
    public function setReturnEnvelope(?array $returnEnvelope): void
    {
        $this->returnEnvelope = $returnEnvelope;
    }

    /**
     * Returns Perforated Page.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for use
     * with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page number.
     * To see how perforation will impact your letter design, view our <a href="https://s3-us-west-2.
     * amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf" target="_blank">perforation
     * guide</a>.
     */
    public function getPerforatedPage(): ?int
    {
        if (count($this->perforatedPage) == 0) {
            return null;
        }
        return $this->perforatedPage['value'];
    }

    /**
     * Sets Perforated Page.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for use
     * with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page number.
     * To see how perforation will impact your letter design, view our <a href="https://s3-us-west-2.
     * amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf" target="_blank">perforation
     * guide</a>.
     *
     * @maps perforated_page
     */
    public function setPerforatedPage(?int $perforatedPage): void
    {
        $this->perforatedPage['value'] = $perforatedPage;
    }

    /**
     * Unsets Perforated Page.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for use
     * with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page number.
     * To see how perforation will impact your letter design, view our <a href="https://s3-us-west-2.
     * amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf" target="_blank">perforation
     * guide</a>.
     */
    public function unsetPerforatedPage(): void
    {
        $this->perforatedPage = [];
    }

    /**
     * Returns Custom Envelope.
     */
    public function getCustomEnvelope(): ?array
    {
        return $this->customEnvelope;
    }

    /**
     * Sets Custom Envelope.
     *
     * @maps custom_envelope
     */
    public function setCustomEnvelope(?array $customEnvelope): void
    {
        $this->customEnvelope = $customEnvelope;
    }

    /**
     * Returns To.
     */
    public function getTo(): array
    {
        return $this->to;
    }

    /**
     * Sets To.
     *
     * @required
     * @maps to
     */
    public function setTo(array $to): void
    {
        $this->to = $to;
    }

    /**
     * Returns Carrier.
     */
    public function getCarrier(): string
    {
        return $this->carrier;
    }

    /**
     * Sets Carrier.
     *
     * @maps carrier
     */
    public function setCarrier(string $carrier): void
    {
        $this->carrier = $carrier;
    }

    /**
     * Returns Thumbnails.
     *
     * @return Thumbnail[]|null
     */
    public function getThumbnails(): ?array
    {
        return $this->thumbnails;
    }

    /**
     * Sets Thumbnails.
     *
     * @maps thumbnails
     *
     * @param Thumbnail[]|null $thumbnails
     */
    public function setThumbnails(?array $thumbnails): void
    {
        $this->thumbnails = $thumbnails;
    }

    /**
     * Returns Expected Delivery Date.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its `send_date`.
     */
    public function getExpectedDeliveryDate(): ?\DateTime
    {
        return $this->expectedDeliveryDate;
    }

    /**
     * Sets Expected Delivery Date.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its `send_date`.
     *
     * @maps expected_delivery_date
     * @factory \LobLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setExpectedDeliveryDate(?\DateTime $expectedDeliveryDate): void
    {
        $this->expectedDeliveryDate = $expectedDeliveryDate;
    }

    /**
     * Returns Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     */
    public function getDateCreated(): ?\DateTime
    {
        return $this->dateCreated;
    }

    /**
     * Sets Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     *
     * @maps date_created
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateCreated(?\DateTime $dateCreated): void
    {
        $this->dateCreated = $dateCreated;
    }

    /**
     * Returns Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     */
    public function getDateModified(): ?\DateTime
    {
        return $this->dateModified;
    }

    /**
     * Sets Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     *
     * @maps date_modified
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateModified(?\DateTime $dateModified): void
    {
        $this->dateModified = $dateModified;
    }

    /**
     * Returns Deleted.
     * Only returned if the resource has been successfully deleted.
     */
    public function getDeleted(): ?bool
    {
        return $this->deleted;
    }

    /**
     * Sets Deleted.
     * Only returned if the resource has been successfully deleted.
     *
     * @maps deleted
     */
    public function setDeleted(?bool $deleted): void
    {
        $this->deleted = $deleted;
    }

    /**
     * Returns From.
     */
    public function getFrom(): array
    {
        return $this->from;
    }

    /**
     * Sets From.
     *
     * @required
     * @maps from
     */
    public function setFrom(array $from): void
    {
        $this->from = $from;
    }

    /**
     * Returns Url.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to
     * prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated.
     */
    public function getUrl(): ?string
    {
        return $this->url;
    }

    /**
     * Sets Url.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to
     * prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated.
     *
     * @maps url
     */
    public function setUrl(?string $url): void
    {
        $this->url = $url;
    }

    /**
     * Returns Id.
     * Unique identifier prefixed with `ltr_`.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique identifier prefixed with `ltr_`.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Template Id.
     */
    public function getTemplateId(): ?string
    {
        return $this->templateId;
    }

    /**
     * Sets Template Id.
     *
     * @maps template_id
     */
    public function setTemplateId(?string $templateId): void
    {
        $this->templateId = $templateId;
    }

    /**
     * Returns Template Version Id.
     */
    public function getTemplateVersionId(): ?string
    {
        return $this->templateVersionId;
    }

    /**
     * Sets Template Version Id.
     *
     * @maps template_version_id
     */
    public function setTemplateVersionId(?string $templateVersionId): void
    {
        $this->templateVersionId = $templateVersionId;
    }

    /**
     * Returns Campaign Id.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     */
    public function getCampaignId(): ?string
    {
        if (count($this->campaignId) == 0) {
            return null;
        }
        return $this->campaignId['value'];
    }

    /**
     * Sets Campaign Id.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     *
     * @maps campaign_id
     */
    public function setCampaignId(?string $campaignId): void
    {
        $this->campaignId['value'] = $campaignId;
    }

    /**
     * Unsets Campaign Id.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     */
    public function unsetCampaignId(): void
    {
        $this->campaignId = [];
    }

    /**
     * Returns Use Type.
     */
    public function getUseType(): array
    {
        return $this->useType;
    }

    /**
     * Sets Use Type.
     *
     * @required
     * @maps use_type
     */
    public function setUseType(array $useType): void
    {
        $this->useType = $useType;
    }

    /**
     * Returns Fsc.
     * This is in beta. Contact support@lob.com or your account contact to learn more. Not available for
     * `A4` letter size.
     */
    public function getFsc(): ?bool
    {
        return $this->fsc;
    }

    /**
     * Sets Fsc.
     * This is in beta. Contact support@lob.com or your account contact to learn more. Not available for
     * `A4` letter size.
     *
     * @maps fsc
     */
    public function setFsc(?bool $fsc): void
    {
        $this->fsc = $fsc;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @maps status
     * @factory \LobLib\Models\ThestatusofthebuckslipEnum::checkValue
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Failure Reason.
     * A string describing the reason for failure if the letter failed to render.
     */
    public function getFailureReason(): ?string
    {
        if (count($this->failureReason) == 0) {
            return null;
        }
        return $this->failureReason['value'];
    }

    /**
     * Sets Failure Reason.
     * A string describing the reason for failure if the letter failed to render.
     *
     * @maps failure_reason
     */
    public function setFailureReason(?string $failureReason): void
    {
        $this->failureReason['value'] = $failureReason;
    }

    /**
     * Unsets Failure Reason.
     * A string describing the reason for failure if the letter failed to render.
     */
    public function unsetFailureReason(): void
    {
        $this->failureReason = [];
    }

    /**
     * Returns Object.
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * Sets Object.
     *
     * @maps object
     * @factory \LobLib\Models\Object8Enum::checkValue
     */
    public function setObject(?string $object): void
    {
        $this->object = $object;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['extra_service']              = ExtraService1Enum::checkValue($this->extraService);
        if (!empty($this->trackingNumber)) {
            $json['tracking_number']        = $this->trackingNumber['value'];
        }
        $json['tracking_events']            = $this->trackingEvents;
        if (isset($this->returnAddress)) {
            $json['return_address']         = $this->returnAddress;
        }
        if (!empty($this->description)) {
            $json['description']            = $this->description['value'];
        }
        if (isset($this->metadata)) {
            $json['metadata']               = $this->metadata;
        }
        if (!empty($this->mergeVariables)) {
            $json['merge_variables']        = $this->mergeVariables['value'];
        }
        if (isset($this->sendDate)) {
            $json['send_date']              = $this->sendDate;
        }
        if (isset($this->mailType)) {
            $json['mail_type']              = MailTypeEnum::checkValue($this->mailType);
        }
        $json['color']                      = $this->color;
        if (isset($this->doubleSided)) {
            $json['double_sided']           = $this->doubleSided;
        }
        if (isset($this->addressPlacement)) {
            $json['address_placement']      = AddressPlacementEnum::checkValue($this->addressPlacement);
        }
        if (isset($this->returnEnvelope)) {
            $json['return_envelope']        = $this->returnEnvelope;
        }
        if (!empty($this->perforatedPage)) {
            $json['perforated_page']        = $this->perforatedPage['value'];
        }
        if (isset($this->customEnvelope)) {
            $json['custom_envelope']        = $this->customEnvelope;
        }
        $json['to']                         = $this->to;
        $json['carrier']                    = $this->carrier;
        if (isset($this->thumbnails)) {
            $json['thumbnails']             = $this->thumbnails;
        }
        if (isset($this->expectedDeliveryDate)) {
            $json['expected_delivery_date'] = DateTimeHelper::toSimpleDate($this->expectedDeliveryDate);
        }
        if (isset($this->dateCreated)) {
            $json['date_created']           = DateTimeHelper::toRfc3339DateTime($this->dateCreated);
        }
        if (isset($this->dateModified)) {
            $json['date_modified']          = DateTimeHelper::toRfc3339DateTime($this->dateModified);
        }
        if (isset($this->deleted)) {
            $json['deleted']                = $this->deleted;
        }
        $json['from']                       = $this->from;
        if (isset($this->url)) {
            $json['url']                    = $this->url;
        }
        $json['id']                         = $this->id;
        if (isset($this->templateId)) {
            $json['template_id']            = $this->templateId;
        }
        if (isset($this->templateVersionId)) {
            $json['template_version_id']    = $this->templateVersionId;
        }
        if (!empty($this->campaignId)) {
            $json['campaign_id']            = $this->campaignId['value'];
        }
        $json['use_type']                   = $this->useType;
        if (isset($this->fsc)) {
            $json['fsc']                    = $this->fsc;
        }
        if (isset($this->status)) {
            $json['status']                 = ThestatusofthebuckslipEnum::checkValue($this->status);
        }
        if (!empty($this->failureReason)) {
            $json['failure_reason']         = $this->failureReason['value'];
        }
        if (isset($this->object)) {
            $json['object']                 = Object8Enum::checkValue($this->object);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
