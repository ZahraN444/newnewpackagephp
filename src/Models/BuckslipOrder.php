<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\Utils\DateTimeHelper;
use stdClass;

class BuckslipOrder implements \JsonSerializable
{
    /**
     * @var \DateTime
     */
    private $dateCreated;

    /**
     * @var \DateTime
     */
    private $dateModified;

    /**
     * @var bool|null
     */
    private $deleted;

    /**
     * @var string
     */
    private $object;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string|null
     */
    private $buckslipId;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var float|null
     */
    private $quantityOrdered = 0;

    /**
     * @var float|null
     */
    private $unitPrice = 0;

    /**
     * @var float|null
     */
    private $inventory = 0;

    /**
     * @var string|null
     */
    private $cancelledReason;

    /**
     * @var \DateTime|null
     */
    private $availabilityDate;

    /**
     * @var \DateTime|null
     */
    private $expectedAvailabilityDate;

    /**
     * @param \DateTime $dateCreated
     * @param \DateTime $dateModified
     * @param string $object
     */
    public function __construct(\DateTime $dateCreated, \DateTime $dateModified, string $object)
    {
        $this->dateCreated = $dateCreated;
        $this->dateModified = $dateModified;
        $this->object = $object;
    }

    /**
     * Returns Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     */
    public function getDateCreated(): \DateTime
    {
        return $this->dateCreated;
    }

    /**
     * Sets Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     *
     * @required
     * @maps date_created
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateCreated(\DateTime $dateCreated): void
    {
        $this->dateCreated = $dateCreated;
    }

    /**
     * Returns Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     */
    public function getDateModified(): \DateTime
    {
        return $this->dateModified;
    }

    /**
     * Sets Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     *
     * @required
     * @maps date_modified
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateModified(\DateTime $dateModified): void
    {
        $this->dateModified = $dateModified;
    }

    /**
     * Returns Deleted.
     * Only returned if the resource has been successfully deleted.
     */
    public function getDeleted(): ?bool
    {
        return $this->deleted;
    }

    /**
     * Sets Deleted.
     * Only returned if the resource has been successfully deleted.
     *
     * @maps deleted
     */
    public function setDeleted(?bool $deleted): void
    {
        $this->deleted = $deleted;
    }

    /**
     * Returns Object.
     * Value is resource type.
     */
    public function getObject(): string
    {
        return $this->object;
    }

    /**
     * Sets Object.
     * Value is resource type.
     *
     * @required
     * @maps object
     */
    public function setObject(string $object): void
    {
        $this->object = $object;
    }

    /**
     * Returns Id.
     * Unique identifier prefixed with `bo_`.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique identifier prefixed with `bo_`.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Buckslip Id.
     * Unique identifier prefixed with `bck_`.
     */
    public function getBuckslipId(): ?string
    {
        return $this->buckslipId;
    }

    /**
     * Sets Buckslip Id.
     * Unique identifier prefixed with `bck_`.
     *
     * @maps buckslip_id
     */
    public function setBuckslipId(?string $buckslipId): void
    {
        $this->buckslipId = $buckslipId;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @maps status
     * @factory \LobLib\Models\StatusEnum::checkValue
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Quantity Ordered.
     * The quantity of buckslips ordered.
     */
    public function getQuantityOrdered(): ?float
    {
        return $this->quantityOrdered;
    }

    /**
     * Sets Quantity Ordered.
     * The quantity of buckslips ordered.
     *
     * @maps quantity_ordered
     */
    public function setQuantityOrdered(?float $quantityOrdered): void
    {
        $this->quantityOrdered = $quantityOrdered;
    }

    /**
     * Returns Unit Price.
     * The unit price for the buckslip order.
     */
    public function getUnitPrice(): ?float
    {
        return $this->unitPrice;
    }

    /**
     * Sets Unit Price.
     * The unit price for the buckslip order.
     *
     * @maps unit_price
     */
    public function setUnitPrice(?float $unitPrice): void
    {
        $this->unitPrice = $unitPrice;
    }

    /**
     * Returns Inventory.
     * The inventory of the buckslip order.
     */
    public function getInventory(): ?float
    {
        return $this->inventory;
    }

    /**
     * Sets Inventory.
     * The inventory of the buckslip order.
     *
     * @maps inventory
     */
    public function setInventory(?float $inventory): void
    {
        $this->inventory = $inventory;
    }

    /**
     * Returns Cancelled Reason.
     * The reason for cancellation.
     */
    public function getCancelledReason(): ?string
    {
        return $this->cancelledReason;
    }

    /**
     * Sets Cancelled Reason.
     * The reason for cancellation.
     *
     * @maps cancelled_reason
     */
    public function setCancelledReason(?string $cancelledReason): void
    {
        $this->cancelledReason = $cancelledReason;
    }

    /**
     * Returns Availability Date.
     * A timestamp in ISO 8601 format of the date the resource was created.
     */
    public function getAvailabilityDate(): ?\DateTime
    {
        return $this->availabilityDate;
    }

    /**
     * Sets Availability Date.
     * A timestamp in ISO 8601 format of the date the resource was created.
     *
     * @maps availability_date
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setAvailabilityDate(?\DateTime $availabilityDate): void
    {
        $this->availabilityDate = $availabilityDate;
    }

    /**
     * Returns Expected Availability Date.
     * The fixed deadline for the buckslips to be printed.
     */
    public function getExpectedAvailabilityDate(): ?\DateTime
    {
        return $this->expectedAvailabilityDate;
    }

    /**
     * Sets Expected Availability Date.
     * The fixed deadline for the buckslips to be printed.
     *
     * @maps expected_availability_date
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setExpectedAvailabilityDate(?\DateTime $expectedAvailabilityDate): void
    {
        $this->expectedAvailabilityDate = $expectedAvailabilityDate;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['date_created']                   = DateTimeHelper::toRfc3339DateTime($this->dateCreated);
        $json['date_modified']                  = DateTimeHelper::toRfc3339DateTime($this->dateModified);
        if (isset($this->deleted)) {
            $json['deleted']                    = $this->deleted;
        }
        $json['object']                         = $this->object;
        if (isset($this->id)) {
            $json['id']                         = $this->id;
        }
        if (isset($this->buckslipId)) {
            $json['buckslip_id']                = $this->buckslipId;
        }
        if (isset($this->status)) {
            $json['status']                     = StatusEnum::checkValue($this->status);
        }
        if (isset($this->quantityOrdered)) {
            $json['quantity_ordered']           = $this->quantityOrdered;
        }
        if (isset($this->unitPrice)) {
            $json['unit_price']                 = $this->unitPrice;
        }
        if (isset($this->inventory)) {
            $json['inventory']                  = $this->inventory;
        }
        if (isset($this->cancelledReason)) {
            $json['cancelled_reason']           = $this->cancelledReason;
        }
        if (isset($this->availabilityDate)) {
            $json['availability_date']          = DateTimeHelper::toRfc3339DateTime($this->availabilityDate);
        }
        if (isset($this->expectedAvailabilityDate)) {
            $json['expected_availability_date'] = DateTimeHelper::toRfc3339DateTime($this->expectedAvailabilityDate);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
