<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use stdClass;

class CreativeWritable1 implements \JsonSerializable
{
    /**
     * @var string
     */
    private $resourceType;

    /**
     * @var string
     */
    private $campaignId;

    /**
     * @var Details3
     */
    private $details;

    /**
     * @var array
     */
    private $file;

    /**
     * @var array
     */
    private $from;

    /**
     * @var array
     */
    private $description = [];

    /**
     * @var array<string,string>|null
     */
    private $metadata;

    /**
     * @param string $campaignId
     * @param Details3 $details
     * @param array $file
     * @param array $from
     */
    public function __construct(string $campaignId, Details3 $details, array $file, array $from)
    {
        $this->campaignId = $campaignId;
        $this->details = $details;
        $this->file = $file;
        $this->from = $from;
    }

    /**
     * Returns Resource Type.
     * Mailpiece type for the creative
     */
    public function getResourceType(): string
    {
        return $this->resourceType;
    }

    /**
     * Sets Resource Type.
     * Mailpiece type for the creative
     *
     * @maps resource_type
     */
    public function setResourceType(string $resourceType): void
    {
        $this->resourceType = $resourceType;
    }

    /**
     * Returns Campaign Id.
     * Unique identifier prefixed with `cmp_`.
     */
    public function getCampaignId(): string
    {
        return $this->campaignId;
    }

    /**
     * Sets Campaign Id.
     * Unique identifier prefixed with `cmp_`.
     *
     * @required
     * @maps campaign_id
     */
    public function setCampaignId(string $campaignId): void
    {
        $this->campaignId = $campaignId;
    }

    /**
     * Returns Details.
     */
    public function getDetails(): Details3
    {
        return $this->details;
    }

    /**
     * Sets Details.
     *
     * @required
     * @maps details
     */
    public function setDetails(Details3 $details): void
    {
        $this->details = $details;
    }

    /**
     * Returns File.
     */
    public function getFile(): array
    {
        return $this->file;
    }

    /**
     * Sets File.
     *
     * @required
     * @maps file
     */
    public function setFile(array $file): void
    {
        $this->file = $file;
    }

    /**
     * Returns From.
     */
    public function getFrom(): array
    {
        return $this->from;
    }

    /**
     * Sets From.
     *
     * @required
     * @maps from
     */
    public function setFrom(array $from): void
    {
        $this->from = $from;
    }

    /**
     * Returns Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @return array<string,string>|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @maps metadata
     *
     * @param array<string,string>|null $metadata
     */
    public function setMetadata(?array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['resource_type']   = $this->resourceType;
        $json['campaign_id']     = $this->campaignId;
        $json['details']         = $this->details;
        $json['file']            = $this->file;
        $json['from']            = $this->from;
        if (!empty($this->description)) {
            $json['description'] = $this->description['value'];
        }
        if (isset($this->metadata)) {
            $json['metadata']    = $this->metadata;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
