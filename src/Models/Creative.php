<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\ApiHelper;
use LobLib\Utils\DateTimeHelper;
use stdClass;

class Creative implements \JsonSerializable
{
    /**
     * @var \DateTime
     */
    private $dateCreated;

    /**
     * @var \DateTime
     */
    private $dateModified;

    /**
     * @var bool
     */
    private $deleted;

    /**
     * @var string
     */
    private $object;

    /**
     * @var string
     */
    private $resourceType;

    /**
     * @var Details
     */
    private $details;

    /**
     * @var string|InlineAddressUs
     */
    private $from;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var array<string,string>
     */
    private $metadata;

    /**
     * @var string
     */
    private $id;

    /**
     * @var array
     */
    private $templatePreviewUrls;

    /**
     * @var array[]
     */
    private $templatePreviews;

    /**
     * @var CampaignItem[]
     */
    private $campaigns;

    /**
     * @param \DateTime $dateCreated
     * @param \DateTime $dateModified
     * @param bool $deleted
     * @param Details $details
     * @param string|InlineAddressUs $from
     * @param array<string,string> $metadata
     * @param string $id
     * @param array $templatePreviewUrls
     * @param array[] $templatePreviews
     * @param CampaignItem[] $campaigns
     */
    public function __construct(
        \DateTime $dateCreated,
        \DateTime $dateModified,
        bool $deleted,
        Details $details,
        $from,
        array $metadata,
        string $id,
        array $templatePreviewUrls,
        array $templatePreviews,
        array $campaigns
    ) {
        $this->dateCreated = $dateCreated;
        $this->dateModified = $dateModified;
        $this->deleted = $deleted;
        $this->details = $details;
        $this->from = $from;
        $this->metadata = $metadata;
        $this->id = $id;
        $this->templatePreviewUrls = $templatePreviewUrls;
        $this->templatePreviews = $templatePreviews;
        $this->campaigns = $campaigns;
    }

    /**
     * Returns Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     */
    public function getDateCreated(): \DateTime
    {
        return $this->dateCreated;
    }

    /**
     * Sets Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     *
     * @required
     * @maps date_created
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateCreated(\DateTime $dateCreated): void
    {
        $this->dateCreated = $dateCreated;
    }

    /**
     * Returns Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     */
    public function getDateModified(): \DateTime
    {
        return $this->dateModified;
    }

    /**
     * Sets Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     *
     * @required
     * @maps date_modified
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateModified(\DateTime $dateModified): void
    {
        $this->dateModified = $dateModified;
    }

    /**
     * Returns Deleted.
     * Only returned if the resource has been successfully deleted.
     */
    public function getDeleted(): bool
    {
        return $this->deleted;
    }

    /**
     * Sets Deleted.
     * Only returned if the resource has been successfully deleted.
     *
     * @required
     * @maps deleted
     */
    public function setDeleted(bool $deleted): void
    {
        $this->deleted = $deleted;
    }

    /**
     * Returns Object.
     * Value is resource type.
     */
    public function getObject(): string
    {
        return $this->object;
    }

    /**
     * Sets Object.
     * Value is resource type.
     *
     * @maps object
     */
    public function setObject(string $object): void
    {
        $this->object = $object;
    }

    /**
     * Returns Resource Type.
     * Mailpiece type for the creative
     */
    public function getResourceType(): string
    {
        return $this->resourceType;
    }

    /**
     * Sets Resource Type.
     * Mailpiece type for the creative
     *
     * @maps resource_type
     */
    public function setResourceType(string $resourceType): void
    {
        $this->resourceType = $resourceType;
    }

    /**
     * Returns Details.
     */
    public function getDetails(): Details
    {
        return $this->details;
    }

    /**
     * Sets Details.
     *
     * @required
     * @maps details
     */
    public function setDetails(Details $details): void
    {
        $this->details = $details;
    }

    /**
     * Returns From.
     * Must either be an address ID or an inline object with correct address parameters. All addresses will
     * be standardized into uppercase without being modified by verification.
     *
     * @return string|InlineAddressUs
     */
    public function getFrom()
    {
        return $this->from;
    }

    /**
     * Sets From.
     * Must either be an address ID or an inline object with correct address parameters. All addresses will
     * be standardized into uppercase without being modified by verification.
     *
     * @required
     * @maps from
     * @mapsBy oneOf(string,InlineAddressUs)
     *
     * @param string|InlineAddressUs $from
     */
    public function setFrom($from): void
    {
        $this->from = $from;
    }

    /**
     * Returns Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @return array<string,string>
     */
    public function getMetadata(): array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @required
     * @maps metadata
     *
     * @param array<string,string> $metadata
     */
    public function setMetadata(array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Id.
     * Unique identifier prefixed with `crv_`.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique identifier prefixed with `crv_`.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Template Preview Urls.
     * Preview URLs associated with a creative's artwork asset(s) if the creative uses HTML templates as
     * assets. An empty object will be returned if no `template_preview`s have been generated.
     */
    public function getTemplatePreviewUrls(): array
    {
        return $this->templatePreviewUrls;
    }

    /**
     * Sets Template Preview Urls.
     * Preview URLs associated with a creative's artwork asset(s) if the creative uses HTML templates as
     * assets. An empty object will be returned if no `template_preview`s have been generated.
     *
     * @required
     * @maps template_preview_urls
     */
    public function setTemplatePreviewUrls(array $templatePreviewUrls): void
    {
        $this->templatePreviewUrls = $templatePreviewUrls;
    }

    /**
     * Returns Template Previews.
     * A list of template preview objects if the creative uses HTML template(s) as artwork asset(s). An
     * empty array will be returned if no `template_preview`s have been generated for the creative.
     *
     * @return array[]
     */
    public function getTemplatePreviews(): array
    {
        return $this->templatePreviews;
    }

    /**
     * Sets Template Previews.
     * A list of template preview objects if the creative uses HTML template(s) as artwork asset(s). An
     * empty array will be returned if no `template_preview`s have been generated for the creative.
     *
     * @required
     * @maps template_previews
     *
     * @param array[] $templatePreviews
     */
    public function setTemplatePreviews(array $templatePreviews): void
    {
        $this->templatePreviews = $templatePreviews;
    }

    /**
     * Returns Campaigns.
     * Array of campaigns associated with the creative ID
     *
     * @return CampaignItem[]
     */
    public function getCampaigns(): array
    {
        return $this->campaigns;
    }

    /**
     * Sets Campaigns.
     * Array of campaigns associated with the creative ID
     *
     * @required
     * @maps campaigns
     *
     * @param CampaignItem[] $campaigns
     */
    public function setCampaigns(array $campaigns): void
    {
        $this->campaigns = $campaigns;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['date_created']          = DateTimeHelper::toRfc3339DateTime($this->dateCreated);
        $json['date_modified']         = DateTimeHelper::toRfc3339DateTime($this->dateModified);
        $json['deleted']               = $this->deleted;
        $json['object']                = $this->object;
        $json['resource_type']         = $this->resourceType;
        $json['details']               = $this->details;
        $json['from']                  =
            ApiHelper::getJsonHelper()->verifyTypes(
                $this->from,
                'oneOf(string,InlineAddressUs)'
            );
        $json['description']           = $this->description;
        $json['metadata']              = $this->metadata;
        $json['id']                    = $this->id;
        $json['template_preview_urls'] = $this->templatePreviewUrls;
        $json['template_previews']     = $this->templatePreviews;
        $json['campaigns']             = $this->campaigns;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
