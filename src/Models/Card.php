<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\Utils\DateTimeHelper;
use stdClass;

class Card implements \JsonSerializable
{
    /**
     * @var \DateTime
     */
    private $dateCreated;

    /**
     * @var \DateTime
     */
    private $dateModified;

    /**
     * @var bool|null
     */
    private $deleted;

    /**
     * @var string
     */
    private $object;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string|null
     */
    private $size;

    /**
     * @var string
     */
    private $id;

    /**
     * @var string
     */
    private $url;

    /**
     * @var bool
     */
    private $autoReorder;

    /**
     * @var int|null
     */
    private $reorderQuantity;

    /**
     * @var string
     */
    private $rawUrl;

    /**
     * @var string
     */
    private $frontOriginalUrl;

    /**
     * @var string
     */
    private $backOriginalUrl;

    /**
     * @var Thumbnail[]
     */
    private $thumbnails;

    /**
     * @var int
     */
    private $availableQuantity;

    /**
     * @var int
     */
    private $pendingQuantity;

    /**
     * @var string
     */
    private $status;

    /**
     * @var string
     */
    private $orientation;

    /**
     * @var int
     */
    private $thresholdAmount;

    /**
     * @param \DateTime $dateCreated
     * @param \DateTime $dateModified
     * @param string $id
     * @param string $url
     * @param bool $autoReorder
     * @param string $rawUrl
     * @param string $frontOriginalUrl
     * @param string $backOriginalUrl
     * @param Thumbnail[] $thumbnails
     * @param int $availableQuantity
     * @param int $pendingQuantity
     * @param string $status
     * @param string $orientation
     * @param int $thresholdAmount
     */
    public function __construct(
        \DateTime $dateCreated,
        \DateTime $dateModified,
        string $id,
        string $url,
        bool $autoReorder,
        string $rawUrl,
        string $frontOriginalUrl,
        string $backOriginalUrl,
        array $thumbnails,
        int $availableQuantity,
        int $pendingQuantity,
        string $status,
        string $orientation,
        int $thresholdAmount
    ) {
        $this->dateCreated = $dateCreated;
        $this->dateModified = $dateModified;
        $this->id = $id;
        $this->url = $url;
        $this->autoReorder = $autoReorder;
        $this->rawUrl = $rawUrl;
        $this->frontOriginalUrl = $frontOriginalUrl;
        $this->backOriginalUrl = $backOriginalUrl;
        $this->thumbnails = $thumbnails;
        $this->availableQuantity = $availableQuantity;
        $this->pendingQuantity = $pendingQuantity;
        $this->status = $status;
        $this->orientation = $orientation;
        $this->thresholdAmount = $thresholdAmount;
    }

    /**
     * Returns Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     */
    public function getDateCreated(): \DateTime
    {
        return $this->dateCreated;
    }

    /**
     * Sets Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     *
     * @required
     * @maps date_created
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateCreated(\DateTime $dateCreated): void
    {
        $this->dateCreated = $dateCreated;
    }

    /**
     * Returns Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     */
    public function getDateModified(): \DateTime
    {
        return $this->dateModified;
    }

    /**
     * Sets Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     *
     * @required
     * @maps date_modified
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateModified(\DateTime $dateModified): void
    {
        $this->dateModified = $dateModified;
    }

    /**
     * Returns Deleted.
     * Only returned if the resource has been successfully deleted.
     */
    public function getDeleted(): ?bool
    {
        return $this->deleted;
    }

    /**
     * Sets Deleted.
     * Only returned if the resource has been successfully deleted.
     *
     * @maps deleted
     */
    public function setDeleted(?bool $deleted): void
    {
        $this->deleted = $deleted;
    }

    /**
     * Returns Object.
     * Value is resource type.
     */
    public function getObject(): string
    {
        return $this->object;
    }

    /**
     * Sets Object.
     * Value is resource type.
     *
     * @maps object
     */
    public function setObject(string $object): void
    {
        $this->object = $object;
    }

    /**
     * Returns Description.
     * Description of the card.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * Description of the card.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Size.
     */
    public function getSize(): ?string
    {
        return $this->size;
    }

    /**
     * Sets Size.
     *
     * @maps size
     * @factory \LobLib\Models\Size1Enum::checkValue
     */
    public function setSize(?string $size): void
    {
        $this->size = $size;
    }

    /**
     * Returns Id.
     * Unique identifier prefixed with `card_`.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique identifier prefixed with `card_`.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Url.
     * The signed link for the card.
     */
    public function getUrl(): string
    {
        return $this->url;
    }

    /**
     * Sets Url.
     * The signed link for the card.
     *
     * @required
     * @maps url
     */
    public function setUrl(string $url): void
    {
        $this->url = $url;
    }

    /**
     * Returns Auto Reorder.
     * True if the cards should be auto-reordered.
     */
    public function getAutoReorder(): bool
    {
        return $this->autoReorder;
    }

    /**
     * Sets Auto Reorder.
     * True if the cards should be auto-reordered.
     *
     * @required
     * @maps auto_reorder
     */
    public function setAutoReorder(bool $autoReorder): void
    {
        $this->autoReorder = $autoReorder;
    }

    /**
     * Returns Reorder Quantity.
     * The number of cards to be reordered.
     */
    public function getReorderQuantity(): ?int
    {
        return $this->reorderQuantity;
    }

    /**
     * Sets Reorder Quantity.
     * The number of cards to be reordered.
     *
     * @maps reorder_quantity
     */
    public function setReorderQuantity(?int $reorderQuantity): void
    {
        $this->reorderQuantity = $reorderQuantity;
    }

    /**
     * Returns Raw Url.
     * The raw URL of the card.
     */
    public function getRawUrl(): string
    {
        return $this->rawUrl;
    }

    /**
     * Sets Raw Url.
     * The raw URL of the card.
     *
     * @required
     * @maps raw_url
     */
    public function setRawUrl(string $rawUrl): void
    {
        $this->rawUrl = $rawUrl;
    }

    /**
     * Returns Front Original Url.
     * The original URL of the front template.
     */
    public function getFrontOriginalUrl(): string
    {
        return $this->frontOriginalUrl;
    }

    /**
     * Sets Front Original Url.
     * The original URL of the front template.
     *
     * @required
     * @maps front_original_url
     */
    public function setFrontOriginalUrl(string $frontOriginalUrl): void
    {
        $this->frontOriginalUrl = $frontOriginalUrl;
    }

    /**
     * Returns Back Original Url.
     * The original URL of the back template.
     */
    public function getBackOriginalUrl(): string
    {
        return $this->backOriginalUrl;
    }

    /**
     * Sets Back Original Url.
     * The original URL of the back template.
     *
     * @required
     * @maps back_original_url
     */
    public function setBackOriginalUrl(string $backOriginalUrl): void
    {
        $this->backOriginalUrl = $backOriginalUrl;
    }

    /**
     * Returns Thumbnails.
     *
     * @return Thumbnail[]
     */
    public function getThumbnails(): array
    {
        return $this->thumbnails;
    }

    /**
     * Sets Thumbnails.
     *
     * @required
     * @maps thumbnails
     *
     * @param Thumbnail[] $thumbnails
     */
    public function setThumbnails(array $thumbnails): void
    {
        $this->thumbnails = $thumbnails;
    }

    /**
     * Returns Available Quantity.
     * The available quantity of cards.
     */
    public function getAvailableQuantity(): int
    {
        return $this->availableQuantity;
    }

    /**
     * Sets Available Quantity.
     * The available quantity of cards.
     *
     * @required
     * @maps available_quantity
     */
    public function setAvailableQuantity(int $availableQuantity): void
    {
        $this->availableQuantity = $availableQuantity;
    }

    /**
     * Returns Pending Quantity.
     * The pending quantity of cards.
     */
    public function getPendingQuantity(): int
    {
        return $this->pendingQuantity;
    }

    /**
     * Sets Pending Quantity.
     * The pending quantity of cards.
     *
     * @required
     * @maps pending_quantity
     */
    public function setPendingQuantity(int $pendingQuantity): void
    {
        $this->pendingQuantity = $pendingQuantity;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @required
     * @maps status
     * @factory \LobLib\Models\ThestatusofthecardEnum::checkValue
     */
    public function setStatus(string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Orientation.
     */
    public function getOrientation(): string
    {
        return $this->orientation;
    }

    /**
     * Sets Orientation.
     *
     * @required
     * @maps orientation
     * @factory \LobLib\Models\OrientationEnum::checkValue
     */
    public function setOrientation(string $orientation): void
    {
        $this->orientation = $orientation;
    }

    /**
     * Returns Threshold Amount.
     * The threshold amount of the card
     */
    public function getThresholdAmount(): int
    {
        return $this->thresholdAmount;
    }

    /**
     * Sets Threshold Amount.
     * The threshold amount of the card
     *
     * @required
     * @maps threshold_amount
     */
    public function setThresholdAmount(int $thresholdAmount): void
    {
        $this->thresholdAmount = $thresholdAmount;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['date_created']       = DateTimeHelper::toRfc3339DateTime($this->dateCreated);
        $json['date_modified']      = DateTimeHelper::toRfc3339DateTime($this->dateModified);
        if (isset($this->deleted)) {
            $json['deleted']        = $this->deleted;
        }
        $json['object']             = $this->object;
        $json['description']        = $this->description;
        if (isset($this->size)) {
            $json['size']           = Size1Enum::checkValue($this->size);
        }
        $json['id']                 = $this->id;
        $json['url']                = $this->url;
        $json['auto_reorder']       = $this->autoReorder;
        $json['reorder_quantity']   = $this->reorderQuantity;
        $json['raw_url']            = $this->rawUrl;
        $json['front_original_url'] = $this->frontOriginalUrl;
        $json['back_original_url']  = $this->backOriginalUrl;
        $json['thumbnails']         = $this->thumbnails;
        $json['available_quantity'] = $this->availableQuantity;
        $json['pending_quantity']   = $this->pendingQuantity;
        $json['status']             = ThestatusofthecardEnum::checkValue($this->status);
        $json['orientation']        = OrientationEnum::checkValue($this->orientation);
        $json['threshold_amount']   = $this->thresholdAmount;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
