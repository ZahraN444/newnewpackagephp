<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use stdClass;

class Details6 implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $addressPlacement;

    /**
     * @var array
     */
    private $buckslips = [];

    /**
     * @var array
     */
    private $cards = [];

    /**
     * @var array|null
     */
    private $customEnvelope;

    /**
     * @var bool|null
     */
    private $color;

    /**
     * @var bool|null
     */
    private $doubleSided = true;

    /**
     * @var array|null
     */
    private $extraService;

    /**
     * @var string|null
     */
    private $fileOriginalUrl;

    /**
     * @var string|null
     */
    private $mailType;

    /**
     * Returns Address Placement.
     */
    public function getAddressPlacement(): ?string
    {
        return $this->addressPlacement;
    }

    /**
     * Sets Address Placement.
     *
     * @maps address_placement
     * @factory \LobLib\Models\AddressPlacementEnum::checkValue
     */
    public function setAddressPlacement(?string $addressPlacement): void
    {
        $this->addressPlacement = $addressPlacement;
    }

    /**
     * Returns Buckslips.
     * A single-element array containing an existing buckslip id in a string format. See
     * [buckslips](#tag/Buckslips) for more information.
     *
     * @return string[]|null
     */
    public function getBuckslips(): ?array
    {
        if (count($this->buckslips) == 0) {
            return null;
        }
        return $this->buckslips['value'];
    }

    /**
     * Sets Buckslips.
     * A single-element array containing an existing buckslip id in a string format. See
     * [buckslips](#tag/Buckslips) for more information.
     *
     * @maps buckslips
     *
     * @param string[]|null $buckslips
     */
    public function setBuckslips(?array $buckslips): void
    {
        $this->buckslips['value'] = $buckslips;
    }

    /**
     * Unsets Buckslips.
     * A single-element array containing an existing buckslip id in a string format. See
     * [buckslips](#tag/Buckslips) for more information.
     */
    public function unsetBuckslips(): void
    {
        $this->buckslips = [];
    }

    /**
     * Returns Cards.
     * A single-element array containing an existing card id in a string format. See [cards](#tag/Cards)
     * for more information.
     *
     * @return string[]|null
     */
    public function getCards(): ?array
    {
        if (count($this->cards) == 0) {
            return null;
        }
        return $this->cards['value'];
    }

    /**
     * Sets Cards.
     * A single-element array containing an existing card id in a string format. See [cards](#tag/Cards)
     * for more information.
     *
     * @maps cards
     *
     * @param string[]|null $cards
     */
    public function setCards(?array $cards): void
    {
        $this->cards['value'] = $cards;
    }

    /**
     * Unsets Cards.
     * A single-element array containing an existing card id in a string format. See [cards](#tag/Cards)
     * for more information.
     */
    public function unsetCards(): void
    {
        $this->cards = [];
    }

    /**
     * Returns Custom Envelope.
     */
    public function getCustomEnvelope(): ?array
    {
        return $this->customEnvelope;
    }

    /**
     * Sets Custom Envelope.
     *
     * @maps custom_envelope
     */
    public function setCustomEnvelope(?array $customEnvelope): void
    {
        $this->customEnvelope = $customEnvelope;
    }

    /**
     * Returns Color.
     * Set this key to `true` if you would like to print in color. Set to `false` if you would like to
     * print in black and white.
     */
    public function getColor(): ?bool
    {
        return $this->color;
    }

    /**
     * Sets Color.
     * Set this key to `true` if you would like to print in color. Set to `false` if you would like to
     * print in black and white.
     *
     * @maps color
     */
    public function setColor(?bool $color): void
    {
        $this->color = $color;
    }

    /**
     * Returns Double Sided.
     * Set this attribute to `true` for double sided printing, or `false` for for single sided printing.
     * Defaults to `true`.
     */
    public function getDoubleSided(): ?bool
    {
        return $this->doubleSided;
    }

    /**
     * Sets Double Sided.
     * Set this attribute to `true` for double sided printing, or `false` for for single sided printing.
     * Defaults to `true`.
     *
     * @maps double_sided
     */
    public function setDoubleSided(?bool $doubleSided): void
    {
        $this->doubleSided = $doubleSided;
    }

    /**
     * Returns Extra Service.
     */
    public function getExtraService(): ?array
    {
        return $this->extraService;
    }

    /**
     * Sets Extra Service.
     *
     * @maps extra_service
     */
    public function setExtraService(?array $extraService): void
    {
        $this->extraService = $extraService;
    }

    /**
     * Returns File Original Url.
     * The original URL of the `file` template.
     */
    public function getFileOriginalUrl(): ?string
    {
        return $this->fileOriginalUrl;
    }

    /**
     * Sets File Original Url.
     * The original URL of the `file` template.
     *
     * @maps file_original_url
     */
    public function setFileOriginalUrl(?string $fileOriginalUrl): void
    {
        $this->fileOriginalUrl = $fileOriginalUrl;
    }

    /**
     * Returns Mail Type.
     */
    public function getMailType(): ?string
    {
        return $this->mailType;
    }

    /**
     * Sets Mail Type.
     *
     * @maps mail_type
     * @factory \LobLib\Models\MailTypeEnum::checkValue
     */
    public function setMailType(?string $mailType): void
    {
        $this->mailType = $mailType;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->addressPlacement)) {
            $json['address_placement'] = AddressPlacementEnum::checkValue($this->addressPlacement);
        }
        if (!empty($this->buckslips)) {
            $json['buckslips']         = $this->buckslips['value'];
        }
        if (!empty($this->cards)) {
            $json['cards']             = $this->cards['value'];
        }
        if (isset($this->customEnvelope)) {
            $json['custom_envelope']   = $this->customEnvelope;
        }
        if (isset($this->color)) {
            $json['color']             = $this->color;
        }
        if (isset($this->doubleSided)) {
            $json['double_sided']      = $this->doubleSided;
        }
        if (isset($this->extraService)) {
            $json['extra_service']     = $this->extraService;
        }
        if (isset($this->fileOriginalUrl)) {
            $json['file_original_url'] = $this->fileOriginalUrl;
        }
        if (isset($this->mailType)) {
            $json['mail_type']         = MailTypeEnum::checkValue($this->mailType);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
