<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use Core\Utils\CoreHelper;
use Exception;
use stdClass;

/**
 * The coverage level for the country. This represents the maximum level of
 * accuracy an input address can be verified to.
 *
 * * `SUBBUILDING` - Coverage down to unit numbers. For example, in an apartment or a large building
 * * `HOUSENUMBER/BUILDING` - Coverage down to house number. For example, the address where a house or
 * building may be located
 * * `STREET` - Coverage down to street. This means that we can verify that an street exists in a city,
 * state, country
 * * `LOCALITY` - Coverage down to city, state, or village or province. This means that we can verify
 * that a city, village, province, or state exists in a country. Countries differ in how they define
 * what is a province, state, city, village, etc. This attempts to group eveyrthing together.
 * * `SPARSE` - Some addresses for this country exist in our databases
 */
class CoverageEnum
{
    public const SUBBUILDING = 'SUBBUILDING';

    public const ENUM_HOUSENUMBERBUILDING = 'HOUSENUMBER/BUILDING';

    public const STREET = 'STREET';

    public const LOCALITY = 'LOCALITY';

    public const SPARSE = 'SPARSE';

    private const _ALL_VALUES =
        [self::SUBBUILDING, self::ENUM_HOUSENUMBERBUILDING, self::STREET, self::LOCALITY, self::SPARSE];

    /**
     * Ensures that all the given values are present in this Enum.
     *
     * @param array|stdClass|null|string $value Value or a list/map of values to be checked
     *
     * @return array|null|string Input value(s), if all are a part of this Enum
     *
     * @throws Exception Throws exception if any given value is not in this Enum
     */
    public static function checkValue($value)
    {
        $value = json_decode(json_encode($value), true); // converts stdClass into array
        if (CoreHelper::checkValueOrValuesInList($value, self::_ALL_VALUES)) {
            return $value;
        }
        throw new Exception("$value is invalid for CoverageEnum.");
    }
}
