<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use stdClass;

class ReverseGeocode implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var Addresses[]|null
     */
    private $addresses;

    /**
     * @var string|null
     */
    private $object;

    /**
     * Returns Id.
     * Unique identifier prefixed with `us_reverse_geocode_`.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique identifier prefixed with `us_reverse_geocode_`.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Addresses.
     * list of addresses
     *
     * @return Addresses[]|null
     */
    public function getAddresses(): ?array
    {
        return $this->addresses;
    }

    /**
     * Sets Addresses.
     * list of addresses
     *
     * @maps addresses
     *
     * @param Addresses[]|null $addresses
     */
    public function setAddresses(?array $addresses): void
    {
        $this->addresses = $addresses;
    }

    /**
     * Returns Object.
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * Sets Object.
     *
     * @maps object
     * @factory \LobLib\Models\Object15Enum::checkValue
     */
    public function setObject(?string $object): void
    {
        $this->object = $object;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']        = $this->id;
        }
        if (isset($this->addresses)) {
            $json['addresses'] = $this->addresses;
        }
        if (isset($this->object)) {
            $json['object']    = Object15Enum::checkValue($this->object);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
