<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\Utils\DateTimeHelper;
use stdClass;

class TrackingEventCertified implements \JsonSerializable
{
    /**
     * @var string
     */
    private $id;

    /**
     * @var \DateTime|null
     */
    private $time;

    /**
     * @var \DateTime
     */
    private $dateCreated;

    /**
     * @var \DateTime
     */
    private $dateModified;

    /**
     * @var string
     */
    private $object;

    /**
     * @var string
     */
    private $type;

    /**
     * @var string
     */
    private $name;

    /**
     * @var TrackingEventDetails|null
     */
    private $details;

    /**
     * @var array
     */
    private $location = [];

    /**
     * @param string $id
     * @param \DateTime $dateCreated
     * @param \DateTime $dateModified
     * @param string $object
     * @param string $name
     */
    public function __construct(
        string $id,
        \DateTime $dateCreated,
        \DateTime $dateModified,
        string $object,
        string $name
    ) {
        $this->id = $id;
        $this->dateCreated = $dateCreated;
        $this->dateModified = $dateModified;
        $this->object = $object;
        $this->name = $name;
    }

    /**
     * Returns Id.
     * Unique identifier prefixed with `evnt_`.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique identifier prefixed with `evnt_`.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Time.
     * A timestamp in ISO 8601 format of the date USPS registered the event.
     */
    public function getTime(): ?\DateTime
    {
        return $this->time;
    }

    /**
     * Sets Time.
     * A timestamp in ISO 8601 format of the date USPS registered the event.
     *
     * @maps time
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setTime(?\DateTime $time): void
    {
        $this->time = $time;
    }

    /**
     * Returns Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     */
    public function getDateCreated(): \DateTime
    {
        return $this->dateCreated;
    }

    /**
     * Sets Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     *
     * @required
     * @maps date_created
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateCreated(\DateTime $dateCreated): void
    {
        $this->dateCreated = $dateCreated;
    }

    /**
     * Returns Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     */
    public function getDateModified(): \DateTime
    {
        return $this->dateModified;
    }

    /**
     * Sets Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     *
     * @required
     * @maps date_modified
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateModified(\DateTime $dateModified): void
    {
        $this->dateModified = $dateModified;
    }

    /**
     * Returns Object.
     */
    public function getObject(): string
    {
        return $this->object;
    }

    /**
     * Sets Object.
     *
     * @required
     * @maps object
     * @factory \LobLib\Models\Object3Enum::checkValue
     */
    public function setObject(string $object): void
    {
        $this->object = $object;
    }

    /**
     * Returns Type.
     * a Certified letter tracking event
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * a Certified letter tracking event
     *
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Name.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @required
     * @maps name
     * @factory \LobLib\Models\Name1Enum::checkValue
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Details.
     */
    public function getDetails(): ?TrackingEventDetails
    {
        return $this->details;
    }

    /**
     * Sets Details.
     *
     * @maps details
     */
    public function setDetails(?TrackingEventDetails $details): void
    {
        $this->details = $details;
    }

    /**
     * Returns Location.
     * The zip code in which the event occurred if it exists, otherwise will be the name of a Regional
     * Distribution Center if it exists, otherwise will be null.
     */
    public function getLocation(): ?string
    {
        if (count($this->location) == 0) {
            return null;
        }
        return $this->location['value'];
    }

    /**
     * Sets Location.
     * The zip code in which the event occurred if it exists, otherwise will be the name of a Regional
     * Distribution Center if it exists, otherwise will be null.
     *
     * @maps location
     */
    public function setLocation(?string $location): void
    {
        $this->location['value'] = $location;
    }

    /**
     * Unsets Location.
     * The zip code in which the event occurred if it exists, otherwise will be the name of a Regional
     * Distribution Center if it exists, otherwise will be null.
     */
    public function unsetLocation(): void
    {
        $this->location = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['id']            = $this->id;
        if (isset($this->time)) {
            $json['time']      = DateTimeHelper::toRfc3339DateTime($this->time);
        }
        $json['date_created']  = DateTimeHelper::toRfc3339DateTime($this->dateCreated);
        $json['date_modified'] = DateTimeHelper::toRfc3339DateTime($this->dateModified);
        $json['object']        = Object3Enum::checkValue($this->object);
        $json['type']          = $this->type;
        $json['name']          = Name1Enum::checkValue($this->name);
        if (isset($this->details)) {
            $json['details']   = $this->details;
        }
        if (!empty($this->location)) {
            $json['location']  = $this->location['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
