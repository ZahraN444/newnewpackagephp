<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\Utils\DateTimeHelper;
use stdClass;

class CampaignItem implements \JsonSerializable
{
    /**
     * @var array
     */
    private $billingGroupId = [];

    /**
     * @var string
     */
    private $name;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string
     */
    private $scheduleType;

    /**
     * @var array
     */
    private $targetDeliveryDate = [];

    /**
     * @var array
     */
    private $sendDate = [];

    /**
     * @var array
     */
    private $cancelWindowCampaignMinutes = [];

    /**
     * @var array<string,string>|null
     */
    private $metadata;

    /**
     * @var array
     */
    private $useType;

    /**
     * @var bool
     */
    private $autoCancelIfNcoa;

    /**
     * @var string
     */
    private $id;

    /**
     * @var bool
     */
    private $isDraft;

    /**
     * @var array[]
     */
    private $creatives;

    /**
     * @var array[]
     */
    private $uploads;

    /**
     * @var string
     */
    private $object;

    /**
     * @var \DateTime
     */
    private $dateCreated;

    /**
     * @var \DateTime
     */
    private $dateModified;

    /**
     * @var bool|null
     */
    private $deleted;

    /**
     * @param string $name
     * @param array $useType
     * @param bool $autoCancelIfNcoa
     * @param string $id
     * @param bool $isDraft
     * @param array[] $creatives
     * @param array[] $uploads
     * @param \DateTime $dateCreated
     * @param \DateTime $dateModified
     */
    public function __construct(
        string $name,
        array $useType,
        bool $autoCancelIfNcoa,
        string $id,
        bool $isDraft,
        array $creatives,
        array $uploads,
        \DateTime $dateCreated,
        \DateTime $dateModified
    ) {
        $this->name = $name;
        $this->useType = $useType;
        $this->autoCancelIfNcoa = $autoCancelIfNcoa;
        $this->id = $id;
        $this->isDraft = $isDraft;
        $this->creatives = $creatives;
        $this->uploads = $uploads;
        $this->dateCreated = $dateCreated;
        $this->dateModified = $dateModified;
    }

    /**
     * Returns Billing Group Id.
     * Unique identifier prefixed with `bg_`.
     */
    public function getBillingGroupId(): ?string
    {
        if (count($this->billingGroupId) == 0) {
            return null;
        }
        return $this->billingGroupId['value'];
    }

    /**
     * Sets Billing Group Id.
     * Unique identifier prefixed with `bg_`.
     *
     * @maps billing_group_id
     */
    public function setBillingGroupId(?string $billingGroupId): void
    {
        $this->billingGroupId['value'] = $billingGroupId;
    }

    /**
     * Unsets Billing Group Id.
     * Unique identifier prefixed with `bg_`.
     */
    public function unsetBillingGroupId(): void
    {
        $this->billingGroupId = [];
    }

    /**
     * Returns Name.
     * Name of the campaign.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Name of the campaign.
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Schedule Type.
     * How the campaign should be scheduled. Only value available today is `immediate`.
     */
    public function getScheduleType(): string
    {
        return $this->scheduleType;
    }

    /**
     * Sets Schedule Type.
     * How the campaign should be scheduled. Only value available today is `immediate`.
     *
     * @maps schedule_type
     */
    public function setScheduleType(string $scheduleType): void
    {
        $this->scheduleType = $scheduleType;
    }

    /**
     * Returns Target Delivery Date.
     * If `schedule_type` is `target_delivery_date`, provide a targeted delivery date for mail pieces in
     * this campaign.
     */
    public function getTargetDeliveryDate(): ?\DateTime
    {
        if (count($this->targetDeliveryDate) == 0) {
            return null;
        }
        return $this->targetDeliveryDate['value'];
    }

    /**
     * Sets Target Delivery Date.
     * If `schedule_type` is `target_delivery_date`, provide a targeted delivery date for mail pieces in
     * this campaign.
     *
     * @maps target_delivery_date
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setTargetDeliveryDate(?\DateTime $targetDeliveryDate): void
    {
        $this->targetDeliveryDate['value'] = $targetDeliveryDate;
    }

    /**
     * Unsets Target Delivery Date.
     * If `schedule_type` is `target_delivery_date`, provide a targeted delivery date for mail pieces in
     * this campaign.
     */
    public function unsetTargetDeliveryDate(): void
    {
        $this->targetDeliveryDate = [];
    }

    /**
     * Returns Send Date.
     * If `schedule_type` is `scheduled_send_date`, provide a date to send this campaign.
     */
    public function getSendDate(): ?\DateTime
    {
        if (count($this->sendDate) == 0) {
            return null;
        }
        return $this->sendDate['value'];
    }

    /**
     * Sets Send Date.
     * If `schedule_type` is `scheduled_send_date`, provide a date to send this campaign.
     *
     * @maps send_date
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setSendDate(?\DateTime $sendDate): void
    {
        $this->sendDate['value'] = $sendDate;
    }

    /**
     * Unsets Send Date.
     * If `schedule_type` is `scheduled_send_date`, provide a date to send this campaign.
     */
    public function unsetSendDate(): void
    {
        $this->sendDate = [];
    }

    /**
     * Returns Cancel Window Campaign Minutes.
     * A window, in minutes, within which the campaign can be canceled.
     */
    public function getCancelWindowCampaignMinutes(): ?int
    {
        if (count($this->cancelWindowCampaignMinutes) == 0) {
            return null;
        }
        return $this->cancelWindowCampaignMinutes['value'];
    }

    /**
     * Sets Cancel Window Campaign Minutes.
     * A window, in minutes, within which the campaign can be canceled.
     *
     * @maps cancel_window_campaign_minutes
     */
    public function setCancelWindowCampaignMinutes(?int $cancelWindowCampaignMinutes): void
    {
        $this->cancelWindowCampaignMinutes['value'] = $cancelWindowCampaignMinutes;
    }

    /**
     * Unsets Cancel Window Campaign Minutes.
     * A window, in minutes, within which the campaign can be canceled.
     */
    public function unsetCancelWindowCampaignMinutes(): void
    {
        $this->cancelWindowCampaignMinutes = [];
    }

    /**
     * Returns Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @return array<string,string>|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal systems.
     * Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must
     * be at most 500 characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     * "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more
     * information.
     *
     * @maps metadata
     *
     * @param array<string,string>|null $metadata
     */
    public function setMetadata(?array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Use Type.
     */
    public function getUseType(): array
    {
        return $this->useType;
    }

    /**
     * Sets Use Type.
     *
     * @required
     * @maps use_type
     */
    public function setUseType(array $useType): void
    {
        $this->useType = $useType;
    }

    /**
     * Returns Auto Cancel If Ncoa.
     * Whether or not a mail piece should be automatically canceled and not sent if the address is updated
     * via NCOA.
     */
    public function getAutoCancelIfNcoa(): bool
    {
        return $this->autoCancelIfNcoa;
    }

    /**
     * Sets Auto Cancel If Ncoa.
     * Whether or not a mail piece should be automatically canceled and not sent if the address is updated
     * via NCOA.
     *
     * @required
     * @maps auto_cancel_if_ncoa
     */
    public function setAutoCancelIfNcoa(bool $autoCancelIfNcoa): void
    {
        $this->autoCancelIfNcoa = $autoCancelIfNcoa;
    }

    /**
     * Returns Id.
     * Unique identifier prefixed with `cmp_`.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique identifier prefixed with `cmp_`.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Is Draft.
     * Whether or not the campaign is still a draft.
     */
    public function getIsDraft(): bool
    {
        return $this->isDraft;
    }

    /**
     * Sets Is Draft.
     * Whether or not the campaign is still a draft.
     *
     * @required
     * @maps is_draft
     */
    public function setIsDraft(bool $isDraft): void
    {
        $this->isDraft = $isDraft;
    }

    /**
     * Returns Creatives.
     * An array of creatives that have been associated with this campaign.
     *
     * @return array[]
     */
    public function getCreatives(): array
    {
        return $this->creatives;
    }

    /**
     * Sets Creatives.
     * An array of creatives that have been associated with this campaign.
     *
     * @required
     * @maps creatives
     *
     * @param array[] $creatives
     */
    public function setCreatives(array $creatives): void
    {
        $this->creatives = $creatives;
    }

    /**
     * Returns Uploads.
     * A single-element array containing the upload object that is assocated with this campaign.
     *
     * @return array[]
     */
    public function getUploads(): array
    {
        return $this->uploads;
    }

    /**
     * Sets Uploads.
     * A single-element array containing the upload object that is assocated with this campaign.
     *
     * @required
     * @maps uploads
     *
     * @param array[] $uploads
     */
    public function setUploads(array $uploads): void
    {
        $this->uploads = $uploads;
    }

    /**
     * Returns Object.
     * Value is resource type.
     */
    public function getObject(): string
    {
        return $this->object;
    }

    /**
     * Sets Object.
     * Value is resource type.
     *
     * @maps object
     */
    public function setObject(string $object): void
    {
        $this->object = $object;
    }

    /**
     * Returns Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     */
    public function getDateCreated(): \DateTime
    {
        return $this->dateCreated;
    }

    /**
     * Sets Date Created.
     * A timestamp in ISO 8601 format of the date the resource was created.
     *
     * @required
     * @maps date_created
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateCreated(\DateTime $dateCreated): void
    {
        $this->dateCreated = $dateCreated;
    }

    /**
     * Returns Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     */
    public function getDateModified(): \DateTime
    {
        return $this->dateModified;
    }

    /**
     * Sets Date Modified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     *
     * @required
     * @maps date_modified
     * @factory \LobLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDateModified(\DateTime $dateModified): void
    {
        $this->dateModified = $dateModified;
    }

    /**
     * Returns Deleted.
     * Only returned if the resource has been successfully deleted.
     */
    public function getDeleted(): ?bool
    {
        return $this->deleted;
    }

    /**
     * Sets Deleted.
     * Only returned if the resource has been successfully deleted.
     *
     * @maps deleted
     */
    public function setDeleted(?bool $deleted): void
    {
        $this->deleted = $deleted;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->billingGroupId)) {
            $json['billing_group_id']               = $this->billingGroupId['value'];
        }
        $json['name']                               = $this->name;
        $json['description']                        = $this->description;
        $json['schedule_type']                      = $this->scheduleType;
        if (!empty($this->targetDeliveryDate)) {
            $json['target_delivery_date']           =
                DateTimeHelper::toRfc3339DateTime(
                    $this->targetDeliveryDate['value']
                );
        }
        if (!empty($this->sendDate)) {
            $json['send_date']                      = DateTimeHelper::toRfc3339DateTime($this->sendDate['value']);
        }
        if (!empty($this->cancelWindowCampaignMinutes)) {
            $json['cancel_window_campaign_minutes'] = $this->cancelWindowCampaignMinutes['value'];
        }
        if (isset($this->metadata)) {
            $json['metadata']                       = $this->metadata;
        }
        $json['use_type']                           = $this->useType;
        $json['auto_cancel_if_ncoa']                = $this->autoCancelIfNcoa;
        $json['id']                                 = $this->id;
        $json['is_draft']                           = $this->isDraft;
        $json['creatives']                          = $this->creatives;
        $json['uploads']                            = $this->uploads;
        $json['object']                             = $this->object;
        $json['date_created']                       = DateTimeHelper::toRfc3339DateTime($this->dateCreated);
        $json['date_modified']                      = DateTimeHelper::toRfc3339DateTime($this->dateModified);
        if (isset($this->deleted)) {
            $json['deleted']                        = $this->deleted;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
