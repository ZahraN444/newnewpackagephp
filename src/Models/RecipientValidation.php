<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use stdClass;

class RecipientValidation implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var array
     */
    private $recipient = [];

    /**
     * @var string|null
     */
    private $primaryLine;

    /**
     * @var string|null
     */
    private $secondaryLine;

    /**
     * @var string|null
     */
    private $urbanization;

    /**
     * @var string|null
     */
    private $lastLine;

    /**
     * @var array
     */
    private $score = [];

    /**
     * @var string|null
     */
    private $confidence;

    /**
     * @var string|null
     */
    private $object;

    /**
     * Returns Id.
     * Unique identifier prefixed with `id_validation_`.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique identifier prefixed with `id_validation_`.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Recipient.
     * The name of the person whose identity is being validated.
     */
    public function getRecipient(): ?string
    {
        if (count($this->recipient) == 0) {
            return null;
        }
        return $this->recipient['value'];
    }

    /**
     * Sets Recipient.
     * The name of the person whose identity is being validated.
     *
     * @maps recipient
     */
    public function setRecipient(?string $recipient): void
    {
        $this->recipient['value'] = $recipient;
    }

    /**
     * Unsets Recipient.
     * The name of the person whose identity is being validated.
     */
    public function unsetRecipient(): void
    {
        $this->recipient = [];
    }

    /**
     * Returns Primary Line.
     * The primary delivery line (usually the street address) of the address.
     * Combination of the following applicable `components`:
     * * `primary_number`
     * * `street_predirection`
     * * `street_name`
     * * `street_suffix`
     * * `street_postdirection`
     * * `secondary_designator`
     * * `secondary_number`
     * * `pmb_designator`
     * * `pmb_number`
     */
    public function getPrimaryLine(): ?string
    {
        return $this->primaryLine;
    }

    /**
     * Sets Primary Line.
     * The primary delivery line (usually the street address) of the address.
     * Combination of the following applicable `components`:
     * * `primary_number`
     * * `street_predirection`
     * * `street_name`
     * * `street_suffix`
     * * `street_postdirection`
     * * `secondary_designator`
     * * `secondary_number`
     * * `pmb_designator`
     * * `pmb_number`
     *
     * @maps primary_line
     */
    public function setPrimaryLine(?string $primaryLine): void
    {
        $this->primaryLine = $primaryLine;
    }

    /**
     * Returns Secondary Line.
     * The secondary delivery line of the address. This field is typically empty but may contain
     * information if `primary_line` is too long.
     */
    public function getSecondaryLine(): ?string
    {
        return $this->secondaryLine;
    }

    /**
     * Sets Secondary Line.
     * The secondary delivery line of the address. This field is typically empty but may contain
     * information if `primary_line` is too long.
     *
     * @maps secondary_line
     */
    public function setSecondaryLine(?string $secondaryLine): void
    {
        $this->secondaryLine = $secondaryLine;
    }

    /**
     * Returns Urbanization.
     * Only present for addresses in Puerto Rico. An urbanization refers to an area, sector, or development
     * within a city. See <a href="https://pe.usps.com/text/pub28/28api_008.htm#:~:text=I51.,-
     * 4%20Urbanizations&text=In%20Puerto%20Rico%2C%20identical%20street,
     * placed%20before%20the%20urbanization%20name." target="_blank">USPS documentation</a> for
     * clarification.
     */
    public function getUrbanization(): ?string
    {
        return $this->urbanization;
    }

    /**
     * Sets Urbanization.
     * Only present for addresses in Puerto Rico. An urbanization refers to an area, sector, or development
     * within a city. See <a href="https://pe.usps.com/text/pub28/28api_008.htm#:~:text=I51.,-
     * 4%20Urbanizations&text=In%20Puerto%20Rico%2C%20identical%20street,
     * placed%20before%20the%20urbanization%20name." target="_blank">USPS documentation</a> for
     * clarification.
     *
     * @maps urbanization
     */
    public function setUrbanization(?string $urbanization): void
    {
        $this->urbanization = $urbanization;
    }

    /**
     * Returns Last Line.
     * Combination of the following applicable `components`:
     * * City (`city`)
     * * State (`state`)
     * * ZIP code (`zip_code`)
     * * ZIP+4 (`zip_code_plus_4`)
     */
    public function getLastLine(): ?string
    {
        return $this->lastLine;
    }

    /**
     * Sets Last Line.
     * Combination of the following applicable `components`:
     * * City (`city`)
     * * State (`state`)
     * * ZIP code (`zip_code`)
     * * ZIP+4 (`zip_code_plus_4`)
     *
     * @maps last_line
     */
    public function setLastLine(?string $lastLine): void
    {
        $this->lastLine = $lastLine;
    }

    /**
     * Returns Score.
     * A numerical score between 0 and 100 that represents the likelihood the provided name is associated
     * with a physical address.
     */
    public function getScore(): ?float
    {
        if (count($this->score) == 0) {
            return null;
        }
        return $this->score['value'];
    }

    /**
     * Sets Score.
     * A numerical score between 0 and 100 that represents the likelihood the provided name is associated
     * with a physical address.
     *
     * @maps score
     */
    public function setScore(?float $score): void
    {
        $this->score['value'] = $score;
    }

    /**
     * Unsets Score.
     * A numerical score between 0 and 100 that represents the likelihood the provided name is associated
     * with a physical address.
     */
    public function unsetScore(): void
    {
        $this->score = [];
    }

    /**
     * Returns Confidence.
     */
    public function getConfidence(): ?string
    {
        return $this->confidence;
    }

    /**
     * Sets Confidence.
     *
     * @maps confidence
     * @factory \LobLib\Models\ConfidenceEnum::checkValue
     */
    public function setConfidence(?string $confidence): void
    {
        $this->confidence = $confidence;
    }

    /**
     * Returns Object.
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * Sets Object.
     *
     * @maps object
     * @factory \LobLib\Models\Object6Enum::checkValue
     */
    public function setObject(?string $object): void
    {
        $this->object = $object;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']             = $this->id;
        }
        if (!empty($this->recipient)) {
            $json['recipient']      = $this->recipient['value'];
        }
        if (isset($this->primaryLine)) {
            $json['primary_line']   = $this->primaryLine;
        }
        if (isset($this->secondaryLine)) {
            $json['secondary_line'] = $this->secondaryLine;
        }
        if (isset($this->urbanization)) {
            $json['urbanization']   = $this->urbanization;
        }
        if (isset($this->lastLine)) {
            $json['last_line']      = $this->lastLine;
        }
        if (!empty($this->score)) {
            $json['score']          = $this->score['value'];
        }
        if (isset($this->confidence)) {
            $json['confidence']     = ConfidenceEnum::checkValue($this->confidence);
        }
        if (isset($this->object)) {
            $json['object']         = Object6Enum::checkValue($this->object);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
