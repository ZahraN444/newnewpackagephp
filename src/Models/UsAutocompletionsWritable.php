<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use stdClass;

class UsAutocompletionsWritable implements \JsonSerializable
{
    /**
     * @var string
     */
    private $addressPrefix;

    /**
     * @var string|null
     */
    private $city;

    /**
     * @var string|null
     */
    private $state;

    /**
     * @var string|null
     */
    private $zipCode;

    /**
     * @var bool|null
     */
    private $geoIpSort;

    /**
     * @param string $addressPrefix
     */
    public function __construct(string $addressPrefix)
    {
        $this->addressPrefix = $addressPrefix;
    }

    /**
     * Returns Address Prefix.
     * Only accepts numbers and street names in an alphanumeric format.
     */
    public function getAddressPrefix(): string
    {
        return $this->addressPrefix;
    }

    /**
     * Sets Address Prefix.
     * Only accepts numbers and street names in an alphanumeric format.
     *
     * @required
     * @maps address_prefix
     */
    public function setAddressPrefix(string $addressPrefix): void
    {
        $this->addressPrefix = $addressPrefix;
    }

    /**
     * Returns City.
     * An optional city input used to filter suggestions. Case insensitive and does not match partial
     * abbreviations.
     */
    public function getCity(): ?string
    {
        return $this->city;
    }

    /**
     * Sets City.
     * An optional city input used to filter suggestions. Case insensitive and does not match partial
     * abbreviations.
     *
     * @maps city
     */
    public function setCity(?string $city): void
    {
        $this->city = $city;
    }

    /**
     * Returns State.
     * An optional state input used to filter suggestions. Case insensitive and does not match partial
     * abbreviations.
     */
    public function getState(): ?string
    {
        return $this->state;
    }

    /**
     * Sets State.
     * An optional state input used to filter suggestions. Case insensitive and does not match partial
     * abbreviations.
     *
     * @maps state
     */
    public function setState(?string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns Zip Code.
     * An optional ZIP Code input used to filter suggestions. Matches partial entries.
     */
    public function getZipCode(): ?string
    {
        return $this->zipCode;
    }

    /**
     * Sets Zip Code.
     * An optional ZIP Code input used to filter suggestions. Matches partial entries.
     *
     * @maps zip_code
     */
    public function setZipCode(?string $zipCode): void
    {
        $this->zipCode = $zipCode;
    }

    /**
     * Returns Geo Ip Sort.
     * If `true`, sort suggestions by proximity to the IP set in the `X-Forwarded-For` header.
     */
    public function getGeoIpSort(): ?bool
    {
        return $this->geoIpSort;
    }

    /**
     * Sets Geo Ip Sort.
     * If `true`, sort suggestions by proximity to the IP set in the `X-Forwarded-For` header.
     *
     * @maps geo_ip_sort
     */
    public function setGeoIpSort(?bool $geoIpSort): void
    {
        $this->geoIpSort = $geoIpSort;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['address_prefix']  = $this->addressPrefix;
        if (isset($this->city)) {
            $json['city']        = $this->city;
        }
        if (isset($this->state)) {
            $json['state']       = $this->state;
        }
        if (isset($this->zipCode)) {
            $json['zip_code']    = $this->zipCode;
        }
        if (isset($this->geoIpSort)) {
            $json['geo_ip_sort'] = $this->geoIpSort;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
