<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use stdClass;

class BankAccountVerify implements \JsonSerializable
{
    /**
     * @var int[]
     */
    private $amounts;

    /**
     * @param int[] $amounts
     */
    public function __construct(array $amounts)
    {
        $this->amounts = $amounts;
    }

    /**
     * Returns Amounts.
     * In live mode, an array containing the two micro deposits (in cents) placed in the bank account. In
     * test mode, no micro deposits will be placed, so any two integers between `1` and `100` will work.
     *
     * @return int[]
     */
    public function getAmounts(): array
    {
        return $this->amounts;
    }

    /**
     * Sets Amounts.
     * In live mode, an array containing the two micro deposits (in cents) placed in the bank account. In
     * test mode, no micro deposits will be placed, so any two integers between `1` and `100` will work.
     *
     * @required
     * @maps amounts
     *
     * @param int[] $amounts
     */
    public function setAmounts(array $amounts): void
    {
        $this->amounts = $amounts;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['amounts'] = $this->amounts;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
