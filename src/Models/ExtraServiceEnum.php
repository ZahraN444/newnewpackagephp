<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use Core\Utils\CoreHelper;
use Exception;
use stdClass;

/**
 * Add an extra service to your letter. Can only be non-`null` if `mail_type` isn't `usps_standard`.
 * See <a href="https://www.lob.com/pricing/print-mail#compare" target="_blank">pricing</a> for extra
 * costs incurred.
 * * `certified` - track and confirm delivery for domestic destinations. An extra sheet (1 PDF page
 * single-sided or 2 PDF pages double-sided) is added to the beginning of your letter for address and
 * barcode information. See here for templates: <a href="https://s3-us-west-2.amazonaws.com/public.lob.
 * com/assets/templates/letter_certified_template.pdf" target="_blank">#10 envelope</a> and <a
 * href="https://s3-us-west-2.amazonaws.com/public.lob.
 * com/assets/templates/letter_certified_flat_template.pdf" target="_blank">flat envelope</a> (used for
 * letters over 6 pages single-sided or 12 pages double-sided). You will not be charged for this extra
 * sheet.
 * * `certified_return_receipt` - request an electronic copy of the recipient's signature to prove
 * delivery of your certified letter
 * * `registered` - provides tracking and confirmation for international addresses
 */
class ExtraServiceEnum
{
    public const CERTIFIED = 'certified';

    public const CERTIFIED_RETURN_RECEIPT = 'certified_return_receipt';

    public const REGISTERED = 'registered';

    private const _ALL_VALUES = [self::CERTIFIED, self::CERTIFIED_RETURN_RECEIPT, self::REGISTERED];

    /**
     * Ensures that all the given values are present in this Enum.
     *
     * @param array|stdClass|null|string $value Value or a list/map of values to be checked
     *
     * @return array|null|string Input value(s), if all are a part of this Enum
     *
     * @throws Exception Throws exception if any given value is not in this Enum
     */
    public static function checkValue($value)
    {
        $value = json_decode(json_encode($value), true); // converts stdClass into array
        if (CoreHelper::checkValueOrValuesInList($value, self::_ALL_VALUES)) {
            return $value;
        }
        throw new Exception("$value is invalid for ExtraServiceEnum.");
    }
}
