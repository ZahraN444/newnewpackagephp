<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\ApiHelper;
use stdClass;

class EventType implements \JsonSerializable
{
    /**
     * @var string
     */
    private $id;

    /**
     * @var bool
     */
    private $enabledForTest;

    /**
     * @var string
     */
    private $resource;

    /**
     * @var string
     */
    private $object;

    /**
     * @param string $id
     * @param bool $enabledForTest
     * @param string $resource
     */
    public function __construct(string $id, bool $enabledForTest, string $resource)
    {
        $this->id = $id;
        $this->enabledForTest = $enabledForTest;
        $this->resource = $resource;
    }

    /**
     * Returns Id.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @required
     * @maps id
     * @mapsBy oneOf(PostcardTypesEnum,SelfMailerTypesEnum,LetterTypesEnum,CheckTypesEnum,AddressTypesEnum,BankAccountTypesEnum)
     * @factory \LobLib\Models\PostcardTypesEnum::checkValue PostcardTypesEnum
     * @factory \LobLib\Models\SelfMailerTypesEnum::checkValue SelfMailerTypesEnum
     * @factory \LobLib\Models\LetterTypesEnum::checkValue LetterTypesEnum
     * @factory \LobLib\Models\CheckTypesEnum::checkValue CheckTypesEnum
     * @factory \LobLib\Models\AddressTypesEnum::checkValue AddressTypesEnum
     * @factory \LobLib\Models\BankAccountTypesEnum::checkValue BankAccountTypesEnum
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Enabled for Test.
     * Value is `true` if the event type is enabled in both the test and live environments and `false` if
     * it is only enabled in the live environment.
     */
    public function getEnabledForTest(): bool
    {
        return $this->enabledForTest;
    }

    /**
     * Sets Enabled for Test.
     * Value is `true` if the event type is enabled in both the test and live environments and `false` if
     * it is only enabled in the live environment.
     *
     * @required
     * @maps enabled_for_test
     */
    public function setEnabledForTest(bool $enabledForTest): void
    {
        $this->enabledForTest = $enabledForTest;
    }

    /**
     * Returns Resource.
     */
    public function getResource(): string
    {
        return $this->resource;
    }

    /**
     * Sets Resource.
     *
     * @required
     * @maps resource
     * @factory \LobLib\Models\ResourceEnum::checkValue
     */
    public function setResource(string $resource): void
    {
        $this->resource = $resource;
    }

    /**
     * Returns Object.
     * Value is resource type.
     */
    public function getObject(): string
    {
        return $this->object;
    }

    /**
     * Sets Object.
     * Value is resource type.
     *
     * @maps object
     */
    public function setObject(string $object): void
    {
        $this->object = $object;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['id']               =
            ApiHelper::getJsonHelper()->verifyTypes(
                $this->id,
                'oneOf(PostcardTypesEnum,SelfMailerTypesEnum,LetterTypesEnum,CheckTypesEnum,AddressTy' .
                'pesEnum,BankAccountTypesEnum)',
                [
                    '\LobLib\Models\PostcardTypesEnum::checkValue PostcardTypesEnum',
                    '\LobLib\Models\SelfMailerTypesEnum::checkValue SelfMailerTypesEnum',
                    '\LobLib\Models\LetterTypesEnum::checkValue LetterTypesEnum',
                    '\LobLib\Models\CheckTypesEnum::checkValue CheckTypesEnum',
                    '\LobLib\Models\AddressTypesEnum::checkValue AddressTypesEnum',
                    '\LobLib\Models\BankAccountTypesEnum::checkValue BankAccountTypesEnum'
                ]
            );
        $json['enabled_for_test'] = $this->enabledForTest;
        $json['resource']         = ResourceEnum::checkValue($this->resource);
        $json['object']           = $this->object;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
