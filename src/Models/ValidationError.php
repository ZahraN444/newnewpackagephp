<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Models;

use LobLib\ApiHelper;
use stdClass;

class ValidationError implements \JsonSerializable
{
    /**
     * @var array<string|int>
     */
    private $loc;

    /**
     * @var string
     */
    private $msg;

    /**
     * @var string
     */
    private $type;

    /**
     * @param array<string|int> $loc
     * @param string $msg
     * @param string $type
     */
    public function __construct(array $loc, string $msg, string $type)
    {
        $this->loc = $loc;
        $this->msg = $msg;
        $this->type = $type;
    }

    /**
     * Returns Loc.
     *
     * @return array<string|int>
     */
    public function getLoc(): array
    {
        return $this->loc;
    }

    /**
     * Sets Loc.
     *
     * @required
     * @maps loc
     * @mapsBy anyOf(string,int)[]
     *
     * @param array<string|int> $loc
     */
    public function setLoc(array $loc): void
    {
        $this->loc = $loc;
    }

    /**
     * Returns Msg.
     */
    public function getMsg(): string
    {
        return $this->msg;
    }

    /**
     * Sets Msg.
     *
     * @required
     * @maps msg
     */
    public function setMsg(string $msg): void
    {
        $this->msg = $msg;
    }

    /**
     * Returns Type.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['loc']  = ApiHelper::getJsonHelper()->verifyTypes($this->loc, 'anyOf(string,int)[]');
        $json['msg']  = $this->msg;
        $json['type'] = $this->type;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
