<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use LobLib\Exceptions\ApiException;
use LobLib\Exceptions\Domains0Error1Exception;
use LobLib\Models\AllLetters;
use LobLib\Models\Beforeafter;
use LobLib\Models\LetterEditable;
use LobLib\Models\LettersResponse;
use LobLib\Models\MailTypeEnum;
use LobLib\Models\SortBy1;

class LettersController extends BaseController
{
    /**
     * Retrieves the details of an existing letter. You need only supply the unique letter identifier that
     * was returned upon letter creation.
     *
     * @param string $ltrId id of the letter
     *
     * @return array Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function letterRetrieve(string $ltrId): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/letters/{ltr_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('ltr_id', $ltrId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Completely removes a letter from production. This can only be done if the letter has a `send_date`
     * and the `send_date` has not yet passed. If the letter is successfully canceled, you will not be
     * charged for it. Read more on [cancellation windows](#section/Cancellation-Windows) and
     * [scheduling](#section/Scheduled-Mailings). Scheduling and cancellation is a premium feature. Upgrade
     * to the appropriate <a href="https://dashboard.lob.com/#/settings/editions" target="_blank">Print &
     * Mail Edition</a> to gain access.
     *
     * @param string $ltrId id of the letter
     *
     * @return LettersResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function letterCancel(string $ltrId): LettersResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/letters/{ltr_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('ltr_id', $ltrId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(LettersResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns a list of your letters. The letters are returned sorted by creation date, with the most
     * recently created letters appearing first.
     *
     * @param int|null $limit How many results to return.
     * @param Beforeafter|null $beforeAfter `before` and `after` are both optional but only one of
     *        them can be in the query at a time.
     * @param string[]|null $mInclude Request that the response include the total count by
     *        specifying `include=["total_count"]`.
     * @param array<string,string>|null $dateCreated Filter by date created. Accepted formats are
     *        ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z"
     *        }` where `gt` is >, `lt` is <, `gte` is ≥, and `lte` is ≤.
     * @param array<string,string>|null $metadata Filter by metadata key-value pair`.
     * @param bool|null $color Set to `true` to return only color letters. Set to `false` to return
     *        only black & white letters.
     * @param bool|null $scheduled * `true` - only return orders (past or future) where `send_date`
     *        is
     *        greater than `date_created`
     *        * `false` - only return orders where `send_date` is equal to `date_created`
     * @param array|null $sendDate Filter by ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01",
     *        "lt": "2012-01-31T12:34:56Z" }` where `gt` is >, `lt` is <, `gte` is ≥, and `lte` is
     *        ≤.
     * @param string|null $mailType A string designating the mail postage type: * `usps_first_class`
     *        - (default) * `usps_standard` - a <a href="https://lob.com/pricing/print-
     *        mail#compare" target="_blank">cheaper option</a> which is less predictable and takes
     *        longer to deliver. `usps_standard` cannot be used with `4x6` postcards or for any
     *        postcards sent outside of the United States.
     * @param SortBy1|null $sortBy Sorts items by ascending or descending dates. Use either
     *        `date_created` or `send_date`, not both.
     *
     * @return AllLetters Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function lettersList(
        ?int $limit = 10,
        ?Beforeafter $beforeAfter = null,
        ?array $mInclude = null,
        ?array $dateCreated = null,
        ?array $metadata = null,
        ?bool $color = null,
        ?bool $scheduled = null,
        ?array $sendDate = null,
        ?string $mailType = null,
        ?SortBy1 $sortBy = null
    ): AllLetters {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/letters')
            ->auth('basicAuth')
            ->parameters(
                QueryParam::init('limit', $limit),
                QueryParam::init('before/after', $beforeAfter),
                QueryParam::init('include', $mInclude),
                QueryParam::init('date_created', $dateCreated),
                QueryParam::init('metadata', $metadata),
                QueryParam::init('color', $color),
                QueryParam::init('scheduled', $scheduled),
                QueryParam::init('send_date', $sendDate),
                QueryParam::init('mail_type', $mailType)->serializeBy([MailTypeEnum::class, 'checkValue']),
                QueryParam::init('sort_by', $sortBy)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(AllLetters::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a new letter given information
     *
     * @param LetterEditable $body
     * @param string|null $idempotencyKey A string of no longer than 256 characters that uniquely
     *        identifies this resource. For more help integrating idempotency keys, refer to our
     *        <a href="https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-
     *        settings#idempotent-requests-12" target="_blank">implementation guide</a>.
     * @param string|null $idempotencyKey2 A string of no longer than 256 characters that uniquely
     *        identifies this resource. For more help integrating idempotency keys, refer to our
     *        <a href="https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-
     *        settings#idempotent-requests-12" target="_blank">implementation guide</a>.
     *
     * @return array Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function letterCreate(
        LetterEditable $body,
        ?string $idempotencyKey = null,
        ?string $idempotencyKey2 = null
    ): array {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/letters')
            ->auth('basicAuth')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                HeaderParam::init('Idempotency-Key', $idempotencyKey),
                QueryParam::init('idempotency_key2', $idempotencyKey2)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class));

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
