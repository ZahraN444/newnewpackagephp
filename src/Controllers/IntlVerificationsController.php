<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use LobLib\Exceptions\ApiException;
use LobLib\Exceptions\Domains0Error1Exception;
use LobLib\Models\ContentTypeEnum;
use LobLib\Models\IntlVerification;
use LobLib\Models\IntlVerifications;
use LobLib\Models\MultipleComponentsIntl;
use LobLib\Models\XLangOutput1Enum;

class IntlVerificationsController extends BaseController
{
    /**
     * Verify a list of international (except US or US territories) address _with a live API key_. Requests
     * to this endpoint with a test API key will return a dummy response based on the primary line you
     * input.
     *
     * @param string $contentType
     * @param MultipleComponentsIntl[] $addresses
     *
     * @return IntlVerifications Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function bulkIntlVerifications(string $contentType, array $addresses): IntlVerifications
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/bulk/intl_verifications')
            ->auth('basicAuth')
            ->parameters(
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('addresses', $addresses)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(IntlVerifications::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Verify an international (except US or US territories) address _with a live API key_. Requests to
     * this endpoint with a test API key will return a dummy response based on the primary line you input.
     *
     * @param array $body
     * @param string|null $xLangOutput * `native` - Translate response to the native language of the
     *        country in the request
     *        * `match` - match the response to the language in the request
     *
     *        Default response is in English.
     *
     * @return IntlVerification Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function intlVerification(array $body, ?string $xLangOutput = null): IntlVerification
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/intl_verifications')
            ->auth('basicAuth')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                HeaderParam::init('x-lang-output', $xLangOutput)->serializeBy([XLangOutput1Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(IntlVerification::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
