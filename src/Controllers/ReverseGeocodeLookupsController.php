<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Controllers;

use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use LobLib\Exceptions\ApiException;
use LobLib\Exceptions\Domains0Error1Exception;
use LobLib\Models\ContentTypeEnum;
use LobLib\Models\ReverseGeocode;

class ReverseGeocodeLookupsController extends BaseController
{
    /**
     * Reverse geocode a valid US location with a live API key.
     *
     * @param string $contentType
     * @param float|null $latitude A positive or negative decimal indicating the geographic latitude
     *        of the address, specifying the north-to-south position of a location. This should be
     *        input with `longitude` to pinpoint locations on a map.
     * @param float|null $longitude A positive or negative decimal indicating the geographic
     *        longitude of the address, specifying the north-to-south position of a location. This
     *        should be input with `latitude` to pinpoint locations on a map.
     * @param int|null $size Determines the number of locations returned. Possible values are
     *        between 1 and 50 and any number higher will be rounded down to 50. Default size is a
     *        list of 5 reverse geocoded locations.
     *
     * @return ReverseGeocode Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reverseGeocodeLookup(
        string $contentType,
        ?float $latitude,
        ?float $longitude,
        ?int $size = 5
    ): ReverseGeocode {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/us_reverse_geocode_lookups')
            ->auth('basicAuth')
            ->parameters(
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('latitude', $latitude),
                FormParam::init('longitude', $longitude),
                QueryParam::init('size', $size)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(ReverseGeocode::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
