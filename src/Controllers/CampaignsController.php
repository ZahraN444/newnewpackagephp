<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Controllers;

use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use LobLib\Exceptions\ApiException;
use LobLib\Exceptions\Domains0Error1Exception;
use LobLib\Models\AllCampaigns;
use LobLib\Models\Beforeafter;
use LobLib\Models\Campaign;
use LobLib\Models\CampaignsResponse4;
use LobLib\Models\CmpScheduleTypeEnum;
use LobLib\Models\ContentTypeEnum;
use LobLib\Models\XLangOutput1Enum;
use LobLib\Utils\DateTimeHelper;
use LobLib\Utils\FileWrapper;

class CampaignsController extends BaseController
{
    /**
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most
     * recently created campaigns appearing first.
     *
     * @param int|null $limit How many results to return.
     * @param string[]|null $mInclude Request that the response include the total count by
     *        specifying `include=["total_count"]`.
     * @param Beforeafter|null $beforeAfter `before` and `after` are both optional but only one of
     *        them can be in the query at a time.
     *
     * @return AllCampaigns Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function campaignsList(
        ?int $limit = 10,
        ?array $mInclude = null,
        ?Beforeafter $beforeAfter = null
    ): AllCampaigns {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/campaigns')
            ->auth('basicAuth')
            ->parameters(
                QueryParam::init('limit', $limit),
                QueryParam::init('include', $mInclude),
                QueryParam::init('before/after', $beforeAfter)
            );

        $_resHandler = $this->responseHandler()->type(AllCampaigns::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a new campaign with the provided properties. See how to launch your first campaign
     * [here](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-
     * sends/launch-your-first-campaign).
     *
     * @param string $contentType
     * @param string $name Name of the campaign.
     * @param string $scheduleType
     * @param FileWrapper $useType
     * @param string|null $xLangOutput * `native` - Translate response to the native language of the
     *        country in the request
     *        * `match` - match the response to the language in the request
     *
     *        Default response is in English.
     * @param string|null $billingGroupId Unique identifier prefixed with `bg_`.
     * @param string|null $description An internal description that identifies this resource. Must
     *        be no longer than 255 characters.
     * @param \DateTime|null $targetDeliveryDate If `schedule_type` is `target_delivery_date`,
     *        provide a targeted delivery date for mail pieces in this campaign.
     * @param \DateTime|null $sendDate If `schedule_type` is `scheduled_send_date`, provide a date
     *        to send this campaign.
     * @param int|null $cancelWindowCampaignMinutes A window, in minutes, within which the campaign
     *        can be canceled.
     * @param array<string,string>|null $metadata Use metadata to store custom information for
     *        tagging and labeling back to your internal systems. Must be an object with up to 20
     *        key-value pairs. Keys must be at most 40 characters and values must be at most 500
     *        characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     *        "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata)
     *        for more information.
     * @param bool|null $autoCancelIfNcoa Whether or not a mail piece should be automatically
     *        canceled and not sent if the address is updated via NCOA.
     *
     * @return Campaign Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function campaignCreate(
        string $contentType,
        string $name,
        string $scheduleType,
        FileWrapper $useType,
        ?string $xLangOutput = null,
        ?string $billingGroupId = null,
        ?string $description = null,
        ?\DateTime $targetDeliveryDate = null,
        ?\DateTime $sendDate = null,
        ?int $cancelWindowCampaignMinutes = null,
        ?array $metadata = null,
        ?bool $autoCancelIfNcoa = null
    ): Campaign {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/campaigns')
            ->auth('basicAuth')
            ->parameters(
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('name', $name),
                FormParam::init('schedule_type', $scheduleType)
                    ->serializeBy([CmpScheduleTypeEnum::class, 'checkValue']),
                FormParam::init('use_type', $useType),
                HeaderParam::init('x-lang-output', $xLangOutput)->serializeBy([XLangOutput1Enum::class, 'checkValue']),
                FormParam::init('billing_group_id', $billingGroupId),
                FormParam::init('description', $description),
                FormParam::init('target_delivery_date', $targetDeliveryDate)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                FormParam::init('send_date', $sendDate)->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                FormParam::init('cancel_window_campaign_minutes', $cancelWindowCampaignMinutes),
                FormParam::init('metadata', $metadata),
                FormParam::init('auto_cancel_if_ncoa', $autoCancelIfNcoa)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(Campaign::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieves the details of an existing campaign. You need only supply the unique campaign identifier
     * that was returned upon campaign creation.
     *
     * @param string $cmpId id of the campaign
     *
     * @return Campaign Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function campaignRetrieve(string $cmpId): Campaign
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/campaigns/{cmp_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('cmp_id', $cmpId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(Campaign::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update the details of an existing campaign. You need only supply the unique identifier that was
     * returned upon campaign creation.
     *
     * @param string $cmpId id of the campaign
     * @param string $contentType
     * @param string|null $name
     * @param string|null $description An internal description that identifies this resource. Must
     *        be no longer than 255 characters.
     * @param string|null $scheduleType
     * @param \DateTime|null $targetDeliveryDate If `schedule_type` is `target_delivery_date`,
     *        provide a targeted delivery date for mail pieces in this campaign.
     * @param \DateTime|null $sendDate If `schedule_type` is `scheduled_send_date`, provide a date
     *        to send this campaign.
     * @param int|null $cancelWindowCampaignMinutes A window, in minutes, within which the campaign
     *        can be canceled.
     * @param array<string,string>|null $metadata Use metadata to store custom information for
     *        tagging and labeling back to your internal systems. Must be an object with up to 20
     *        key-value pairs. Keys must be at most 40 characters and values must be at most 500
     *        characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     *        "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata)
     *        for more information.
     * @param bool|null $isDraft Whether or not the campaign is still a draft. Can either be
     *        excluded or `false`.
     * @param FileWrapper|null $useType
     * @param bool|null $autoCancelIfNcoa Whether or not a mail piece should be automatically
     *        canceled and not sent if the address is updated via NCOA.
     *
     * @return Campaign Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function campaignUpdate(
        string $cmpId,
        string $contentType,
        ?string $name = null,
        ?string $description = null,
        ?string $scheduleType = null,
        ?\DateTime $targetDeliveryDate = null,
        ?\DateTime $sendDate = null,
        ?int $cancelWindowCampaignMinutes = null,
        ?array $metadata = null,
        ?bool $isDraft = null,
        ?FileWrapper $useType = null,
        ?bool $autoCancelIfNcoa = null
    ): Campaign {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/campaigns/{cmp_id}')
            ->auth('basicAuth')
            ->parameters(
                TemplateParam::init('cmp_id', $cmpId),
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('name', $name),
                FormParam::init('description', $description),
                FormParam::init('schedule_type', $scheduleType)
                    ->serializeBy([CmpScheduleTypeEnum::class, 'checkValue']),
                FormParam::init('target_delivery_date', $targetDeliveryDate)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                FormParam::init('send_date', $sendDate)->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                FormParam::init('cancel_window_campaign_minutes', $cancelWindowCampaignMinutes),
                FormParam::init('metadata', $metadata),
                FormParam::init('is_draft', $isDraft),
                FormParam::init('use_type', $useType),
                FormParam::init('auto_cancel_if_ncoa', $autoCancelIfNcoa)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(Campaign::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete an existing campaign. You need only supply the unique identifier that was returned upon
     * campaign creation. Deleting a campaign also deletes any associated mail pieces that have been
     * created but not sent. A campaign's `send_date` matches its associated mail pieces' `send_date`s.
     *
     * @param string $cmpId id of the campaign
     *
     * @return CampaignsResponse4 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function campaignDelete(string $cmpId): CampaignsResponse4
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/campaigns/{cmp_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('cmp_id', $cmpId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(CampaignsResponse4::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Sends a campaign. You need only supply the unique campaign identifier that was returned upon
     * campaign creation.
     *
     * @param string $cmpId id of the campaign
     *
     * @return Campaign Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function campaignSend(string $cmpId): Campaign
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/campaigns/{cmp_id}/send')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('cmp_id', $cmpId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(Campaign::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
