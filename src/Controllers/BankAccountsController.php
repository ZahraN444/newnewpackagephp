<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Controllers;

use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use LobLib\Exceptions\ApiException;
use LobLib\Exceptions\Domains0Error1Exception;
use LobLib\Models\AccountTypeEnum;
use LobLib\Models\AllBankAccounts;
use LobLib\Models\BankAccount;
use LobLib\Models\BankAccountsResponse1;
use LobLib\Models\Beforeafter;
use LobLib\Models\CheckTemplateEnum;
use LobLib\Models\ContentTypeEnum;

class BankAccountsController extends BaseController
{
    /**
     * Verify a bank account in order to create a check.
     *
     * @param string $bankId id of the bank account to be verified
     * @param string $contentType
     * @param int[] $amounts In live mode, an array containing the two micro deposits (in cents)
     *        placed in the bank account. In test mode, no micro deposits will be placed, so any
     *        two integers between `1` and `100` will work.
     *
     * @return BankAccount Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function bankAccountVerify(string $bankId, string $contentType, array $amounts): BankAccount
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/bank_accounts/{bank_id}/verify')
            ->auth('basicAuth')
            ->parameters(
                TemplateParam::init('bank_id', $bankId),
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('amounts', $amounts)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(BankAccount::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieves the details of an existing bank account. You need only supply the unique bank account
     * identifier that was returned upon bank account creation.
     *
     * @param string $bankId id of the bank account
     *
     * @return BankAccount Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function bankAccountRetrieve(string $bankId): BankAccount
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/bank_accounts/{bank_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('bank_id', $bankId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(BankAccount::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Permanently deletes a bank account. It cannot be undone.
     *
     * @param string $bankId id of the bank account
     *
     * @return BankAccountsResponse1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function bankAccountDelete(string $bankId): BankAccountsResponse1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/bank_accounts/{bank_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('bank_id', $bankId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(BankAccountsResponse1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns a list of your bank accounts. The bank accounts are returned sorted by creation date, with
     * the most recently created bank accounts appearing first.
     *
     * @param int|null $limit How many results to return.
     * @param Beforeafter|null $beforeAfter `before` and `after` are both optional but only one of
     *        them can be in the query at a time.
     * @param string[]|null $mInclude Request that the response include the total count by
     *        specifying `include=["total_count"]`.
     * @param array<string,string>|null $dateCreated Filter by date created. Accepted formats are
     *        ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z"
     *        }` where `gt` is >, `lt` is <, `gte` is ≥, and `lte` is ≤.
     * @param array<string,string>|null $metadata Filter by metadata key-value pair`.
     *
     * @return AllBankAccounts Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function bankAccountsList(
        ?int $limit = 10,
        ?Beforeafter $beforeAfter = null,
        ?array $mInclude = null,
        ?array $dateCreated = null,
        ?array $metadata = null
    ): AllBankAccounts {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/bank_accounts')
            ->auth('basicAuth')
            ->parameters(
                QueryParam::init('limit', $limit),
                QueryParam::init('before/after', $beforeAfter),
                QueryParam::init('include', $mInclude),
                QueryParam::init('date_created', $dateCreated),
                QueryParam::init('metadata', $metadata)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(AllBankAccounts::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a new bank account with the provided properties. Bank accounts created in live mode will
     * need to be verified via micro deposits before being able to send live checks. The deposits will
     * appear in the bank account in 2-3 business days and have the description "VERIFICATION".
     *
     * @param string $contentType
     * @param string $routingNumber Must be a <a href="https://www.frbservices.org/index.html"
     *        target="_blank">valid US routing number</a>.
     * @param string $accountNumber
     * @param string $accountType
     * @param string $signatory The signatory associated with your account. This name will be
     *        printed on checks created with this bank account. If you prefer to use a custom
     *        signature image on your checks instead, please create your bank account from the <a
     *        href="https://dashboard.lob.com/#/login" target="_blank">Dashboard</a>.
     * @param string|null $description An internal description that identifies this resource. Must
     *        be no longer than 255 characters.
     * @param string|null $checkTemplate
     * @param string|null $fractionalRoutingNumber The fractional routing number for your home bank
     *        account. Required for the `jpm` check template only. Please contact a bank
     *        representative if you do not know the fractional routing number associated with your
     *        home bank institution.
     * @param string|null $city The city associated with your home bank account. Required for the
     *        `jpm` check template only. Please contact a bank representative if you do not know
     *        the city associated with your home bank institution.
     * @param string|null $state The state associated with your home bank account. Required for the
     *        `jpm` check template only. Please contact a bank representative if you do not know
     *        the state associated with your home bank institution.
     * @param string|null $zipcode The zipcode associated with your home bank account. Required for
     *        the `jpm` check template only. Please contact a bank representative if you do not
     *        know the zipcode associated with your home bank institution.
     * @param array<string,string>|null $metadata Use metadata to store custom information for
     *        tagging and labeling back to your internal systems. Must be an object with up to 20
     *        key-value pairs. Keys must be at most 40 characters and values must be at most 500
     *        characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     *        "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata)
     *        for more information.
     *
     * @return BankAccount Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function bankAccountCreate(
        string $contentType,
        string $routingNumber,
        string $accountNumber,
        string $accountType,
        string $signatory,
        ?string $description = null,
        ?string $checkTemplate = null,
        ?string $fractionalRoutingNumber = null,
        ?string $city = null,
        ?string $state = null,
        ?string $zipcode = null,
        ?array $metadata = null
    ): BankAccount {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/bank_accounts')
            ->auth('basicAuth')
            ->parameters(
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('routing_number', $routingNumber),
                FormParam::init('account_number', $accountNumber),
                FormParam::init('account_type', $accountType)->serializeBy([AccountTypeEnum::class, 'checkValue']),
                FormParam::init('signatory', $signatory),
                FormParam::init('description', $description),
                FormParam::init('check_template', $checkTemplate)
                    ->serializeBy([CheckTemplateEnum::class, 'checkValue']),
                FormParam::init('fractional_routing_number', $fractionalRoutingNumber),
                FormParam::init('city', $city),
                FormParam::init('state', $state),
                FormParam::init('zipcode', $zipcode),
                FormParam::init('metadata', $metadata)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(BankAccount::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
