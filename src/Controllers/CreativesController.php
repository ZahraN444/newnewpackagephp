<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use LobLib\Exceptions\ApiException;
use LobLib\Exceptions\Domains0Error1Exception;
use LobLib\Models\ContentTypeEnum;
use LobLib\Models\Creative;
use LobLib\Models\XLangOutput1Enum;
use LobLib\Utils\FileWrapper;

class CreativesController extends BaseController
{
    /**
     * Creates a new creative with the provided properties
     *
     * @param array $body
     * @param string|null $xLangOutput * `native` - Translate response to the native language of the
     *        country in the request
     *        * `match` - match the response to the language in the request
     *
     *        Default response is in English.
     *
     * @return Creative Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function creativeCreate(array $body, ?string $xLangOutput = null): Creative
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/creatives')
            ->auth('basicAuth')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                HeaderParam::init('x-lang-output', $xLangOutput)->serializeBy([XLangOutput1Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(Creative::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieves the details of an existing creative. You need only supply the unique creative identifier
     * that was returned upon creative creation.
     *
     * @param string $crvId id of the creative
     *
     * @return Creative Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function creativeRetrieve(string $crvId): Creative
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/creatives/{crv_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('crv_id', $crvId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(Creative::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update the details of an existing creative. You need only supply the unique identifier that was
     * returned upon creative creation.
     *
     * @param string $crvId id of the creative
     * @param string $contentType
     * @param FileWrapper|null $from
     * @param string|null $description An internal description that identifies this resource. Must
     *        be no longer than 255 characters.
     * @param array<string,string>|null $metadata Use metadata to store custom information for
     *        tagging and labeling back to your internal systems. Must be an object with up to 20
     *        key-value pairs. Keys must be at most 40 characters and values must be at most 500
     *        characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     *        "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata)
     *        for more information.
     *
     * @return Creative Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function creativeUpdate(
        string $crvId,
        string $contentType,
        ?FileWrapper $from = null,
        ?string $description = null,
        ?array $metadata = null
    ): Creative {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/creatives/{crv_id}')
            ->auth('basicAuth')
            ->parameters(
                TemplateParam::init('crv_id', $crvId),
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('from', $from),
                FormParam::init('description', $description),
                FormParam::init('metadata', $metadata)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(Creative::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
