<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Controllers;

use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use LobLib\Exceptions\ApiException;
use LobLib\Exceptions\Domains0Error1Exception;
use LobLib\Models\ContentTypeEnum;
use LobLib\Models\CountryExtendedEnum;
use LobLib\Models\IntlAutocompletions;
use LobLib\Models\XLangOutput1Enum;

class IntlAutocompletionsController extends BaseController
{
    /**
     * Given an address prefix consisting of a partial primary line and country, as well as optional input
     * of city, state, and zip code, this functionality returns up to 10 full International address
     * suggestions. Not all of them will turn out to be valid addresses; they'll need to be
     * [verified](#operation/intl_verification).
     *
     * @param string $contentType
     * @param string $addressPrefix Only accepts numbers and street names in an alphanumeric format.
     * @param string $country
     * @param string|null $xLangOutput * `native` - Translate response to the native language of the
     *        country in the request
     *        * `match` - match the response to the language in the request
     *
     *        Default response is in English.
     * @param string|null $city An optional city input used to filter suggestions. Case insensitive
     *        and does not match partial abbreviations.
     * @param string|null $state An optional state input used to filter suggestions. Case
     *        insensitive and does not match partial abbreviations.
     * @param string|null $zipCode An optional Zip Code input used to filter suggestions. Matches
     *        partial entries.
     * @param bool|null $geoIpSort If `true`, sort suggestions by proximity to the IP set in the
     *        `X-Forwarded-For` header.
     *
     * @return IntlAutocompletions Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function intlAutocompletions(
        string $contentType,
        string $addressPrefix,
        string $country,
        ?string $xLangOutput = null,
        ?string $city = null,
        ?string $state = null,
        ?string $zipCode = null,
        ?bool $geoIpSort = null
    ): IntlAutocompletions {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/intl_autocompletions')
            ->auth('basicAuth')
            ->parameters(
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('address_prefix', $addressPrefix),
                FormParam::init('country', $country)->serializeBy([CountryExtendedEnum::class, 'checkValue']),
                HeaderParam::init('x-lang-output', $xLangOutput)->serializeBy([XLangOutput1Enum::class, 'checkValue']),
                FormParam::init('city', $city),
                FormParam::init('state', $state),
                FormParam::init('zip_code', $zipCode),
                FormParam::init('geo_ip_sort', $geoIpSort)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(IntlAutocompletions::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
