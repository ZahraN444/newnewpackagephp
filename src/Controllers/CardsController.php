<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use LobLib\Exceptions\ApiException;
use LobLib\Exceptions\Domains0Error1Exception;
use LobLib\Models\Beforeafter;
use LobLib\Models\Card;
use LobLib\Models\CardEditable;
use LobLib\Models\CardsResponse;
use LobLib\Models\CardsResponse5;
use LobLib\Models\ContentTypeEnum;

class CardsController extends BaseController
{
    /**
     * Returns a list of your cards. The cards are returned sorted by creation date, with the most recently
     * created addresses appearing first.
     *
     * @param int|null $limit How many results to return.
     * @param Beforeafter|null $beforeAfter `before` and `after` are both optional but only one of
     *        them can be in the query at a time.
     * @param string[]|null $mInclude Request that the response include the total count by
     *        specifying `include=["total_count"]`.
     *
     * @return CardsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cardsList(
        ?int $limit = 10,
        ?Beforeafter $beforeAfter = null,
        ?array $mInclude = null
    ): CardsResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/cards')
            ->auth('basicAuth')
            ->parameters(
                QueryParam::init('limit', $limit),
                QueryParam::init('before/after', $beforeAfter),
                QueryParam::init('include', $mInclude)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(CardsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a new card given information
     *
     * @param CardEditable $body
     *
     * @return Card Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cardCreate(CardEditable $body): Card
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/cards')
            ->auth('basicAuth')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(Card::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieves the details of an existing card. You need only supply the unique customer identifier that
     * was returned upon card creation.
     *
     * @param string $cardId id of the card
     *
     * @return Card Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cardRetrieve(string $cardId): Card
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/cards/{card_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('card_id', $cardId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(Card::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update the details of an existing card. You need only supply the unique identifier that was returned
     * upon card creation.
     *
     * @param string $cardId id of the card
     * @param string $contentType
     * @param string|null $description Description of the card.
     * @param bool|null $autoReorder Allows for auto reordering
     * @param float|null $reorderQuantity The quantity of items to be reordered (only required when
     *        auto_reorder is true).
     *
     * @return Card Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cardUpdate(
        string $cardId,
        string $contentType,
        ?string $description = null,
        ?bool $autoReorder = null,
        ?float $reorderQuantity = null
    ): Card {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/cards/{card_id}')
            ->auth('basicAuth')
            ->parameters(
                TemplateParam::init('card_id', $cardId),
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('description', $description),
                FormParam::init('auto_reorder', $autoReorder),
                FormParam::init('reorder_quantity', $reorderQuantity)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(Card::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete an existing card. You need only supply the unique identifier that was returned upon card
     * creation.
     *
     * @param string $cardId id of the card
     *
     * @return CardsResponse5 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cardDelete(string $cardId): CardsResponse5
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/cards/{card_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('card_id', $cardId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(CardsResponse5::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
