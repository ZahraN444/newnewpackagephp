<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use LobLib\Exceptions\ApiException;
use LobLib\Exceptions\Domains0Error1Exception;
use LobLib\Exceptions\DomainsLinks0Error1Exception;
use LobLib\Exceptions\Links0Error1Exception;
use LobLib\Models\ContentTypeEnum;
use LobLib\Models\DomainResponse;
use LobLib\Models\DomainsResponse;
use LobLib\Models\LinkResponse;
use LobLib\Models\LinkSingle;
use LobLib\Models\LinksResponse;

class URLShortenerController extends BaseController
{
    /**
     * Retrieve details for a single domain.
     *
     * @param string $domainId Unique identifier for a domain.
     *
     * @return DomainResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function domainGet(string $domainId): DomainResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/domains/{domain_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('domain_id', $domainId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(DomainResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete a registered domain. This operation can only be performed if all associated links with the
     * domain are deleted.
     *
     * @param string $domainId Unique identifier for a domain.
     *
     * @return DomainResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function domainDelete(string $domainId): DomainResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/domains/{domain_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('domain_id', $domainId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(DomainResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Add a new custom domain that can be used to create custom links.
     *
     * @param string $contentType
     * @param string $domain The registered domain/hostname.
     *
     * @return DomainResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function domainCreate(string $contentType, string $domain): DomainResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/domains')
            ->auth('basicAuth')
            ->parameters(
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('domain', $domain)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(DomainResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieve a list of all created domains.
     *
     * @return DomainsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function domainList(): DomainsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/domains')->auth('basicAuth');

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(DomainsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete all associated links for a domain
     *
     * @param string $domainId Unique identifier for a domain.
     *
     * @return DomainsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function domainDeleteLinks(string $domainId): DomainsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/domains/{domain_id}/links')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('domain_id', $domainId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', DomainsLinks0Error1Exception::class))
            ->type(DomainsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieves a list of shortened links. The list is sorted by  creation date, with the most recently
     * created appearing first.
     *
     * @param int|null $limit How many results to return.
     * @param int|null $offset An integer that designates the offset at which to begin returning
     *        results. Defaults to 0.
     * @param string[]|null $mInclude Request that the response include the total count by
     *        specifying `include=["total_count"]`.
     * @param array<string,string>|null $dateCreated Filter by date created. Accepted formats are
     *        ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z"
     *        }` where `gt` is >, `lt` is <, `gte` is ≥, and `lte` is ≤.
     * @param array<string,string>|null $metadata Filter by metadata key-value pair`.
     * @param string|null $campaignId Filter the links generated for a particular campaign using its
     *        campaign id.
     * @param bool|null $clicked Retrieve the list of links that have been opened.
     * @param string|null $billingGroupId Filter the links generated for a particular billing group
     *        id.
     *
     * @return LinksResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function linksList(
        ?int $limit = 10,
        ?int $offset = 0,
        ?array $mInclude = null,
        ?array $dateCreated = null,
        ?array $metadata = null,
        ?string $campaignId = null,
        ?bool $clicked = null,
        ?string $billingGroupId = null
    ): LinksResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/links')
            ->auth('basicAuth')
            ->parameters(
                QueryParam::init('limit', $limit),
                QueryParam::init('offset', $offset),
                QueryParam::init('include', $mInclude),
                QueryParam::init('date_created', $dateCreated),
                QueryParam::init('metadata', $metadata),
                QueryParam::init('campaign_id', $campaignId),
                QueryParam::init('clicked', $clicked),
                QueryParam::init('billing_group_id', $billingGroupId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Links0Error1Exception::class))
            ->type(LinksResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrievs a single shortened link.
     *
     * @param string $linkId Unique identifier for a link.
     *
     * @return LinkResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function linksGet(string $linkId): LinkResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/links/{link_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('link_id', $linkId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Links0Error1Exception::class))
            ->type(LinkResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update any of the properties of a shortened link.
     *
     * @param string $linkId Unique identifier for a link.
     * @param string $contentType
     * @param string $redirectLink The original target URL.
     * @param string|null $domain The registered domain to be used for the short URL.
     * @param string|null $slug The unique path for the shortened URL, if empty a unique path will
     *        be used.
     * @param array<string,string>|null $metadataTag Use metadata to store custom information for
     *        tagging and labeling back to your internal systems. Must be an object with up to 20
     *        key-value pairs. Keys must be at most 40 characters and values must be at most 500
     *        characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     *        "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata)
     *        for more information.
     * @param string|null $billingGroupId An optional string with the billing group ID to tag your
     *        usage with. Is used for billing purposes. Requires special activation to use. See <a
     *        href="#tag/Billing-Groups">Billing Group API</a> for more information.
     *
     * @return LinkResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function linkUpdate(
        string $linkId,
        string $contentType,
        string $redirectLink,
        ?string $domain = null,
        ?string $slug = null,
        ?array $metadataTag = null,
        ?string $billingGroupId = null
    ): LinkResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/links/{link_id}')
            ->auth('basicAuth')
            ->parameters(
                TemplateParam::init('link_id', $linkId),
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('redirect_link', $redirectLink),
                FormParam::init('domain', $domain),
                FormParam::init('slug', $slug),
                FormParam::init('metadata_tag', $metadataTag),
                FormParam::init('billing_group_id', $billingGroupId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(LinkResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete the shortened link.
     *
     * @param string $linkId Unique identifier for a link.
     *
     * @return LinkResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function linksDelete(string $linkId): LinkResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/links/{link_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('link_id', $linkId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Links0Error1Exception::class))
            ->type(LinkResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Given a long URL, shorten your URL either by using a custom domain or Lob's own short domain.
     *
     * @param string $contentType
     * @param string $redirectLink The original target URL.
     * @param string|null $domain The registered domain to be used for the short URL.
     * @param string|null $slug The unique path for the shortened URL, if empty a unique path will
     *        be used.
     * @param array<string,string>|null $metadataTag Use metadata to store custom information for
     *        tagging and labeling back to your internal systems. Must be an object with up to 20
     *        key-value pairs. Keys must be at most 40 characters and values must be at most 500
     *        characters. Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     *        "NEWYORK2015"}' Nested objects are not supported.  See [Metadata](#section/Metadata)
     *        for more information.
     * @param string|null $billingGroupId An optional string with the billing group ID to tag your
     *        usage with. Is used for billing purposes. Requires special activation to use. See <a
     *        href="#tag/Billing-Groups">Billing Group API</a> for more information.
     *
     * @return LinkResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function linkCreate(
        string $contentType,
        string $redirectLink,
        ?string $domain = null,
        ?string $slug = null,
        ?array $metadataTag = null,
        ?string $billingGroupId = null
    ): LinkResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/links/shorten')
            ->auth('basicAuth')
            ->parameters(
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('redirect_link', $redirectLink),
                FormParam::init('domain', $domain),
                FormParam::init('slug', $slug),
                FormParam::init('metadata_tag', $metadataTag),
                FormParam::init('billing_group_id', $billingGroupId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(LinkResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Shortens a list of links in a single request.
     *
     * @param LinkSingle[] $body
     *
     * @return LinksResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function linkBulkCreate(array $body): LinksResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/links/shorten/bulk')
            ->auth('basicAuth')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(LinksResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
