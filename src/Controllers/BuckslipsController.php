<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use LobLib\Exceptions\ApiException;
use LobLib\Exceptions\Domains0Error1Exception;
use LobLib\Models\Beforeafter;
use LobLib\Models\Buckslip;
use LobLib\Models\BuckslipEditable;
use LobLib\Models\BuckslipsResponse;
use LobLib\Models\BuckslipsResponse1;
use LobLib\Models\ContentTypeEnum;

class BuckslipsController extends BaseController
{
    /**
     * Returns a list of your buckslips. The buckslips are returned sorted by creation date, with the most
     * recently created buckslips appearing first.
     *
     * @param int|null $limit How many results to return.
     * @param Beforeafter|null $beforeAfter `before` and `after` are both optional but only one of
     *        them can be in the query at a time.
     * @param string[]|null $mInclude Request that the response include the total count by
     *        specifying `include=["total_count"]`.
     *
     * @return BuckslipsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function buckslipsList(
        ?int $limit = 10,
        ?Beforeafter $beforeAfter = null,
        ?array $mInclude = null
    ): BuckslipsResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/buckslips')
            ->auth('basicAuth')
            ->parameters(
                QueryParam::init('limit', $limit),
                QueryParam::init('before/after', $beforeAfter),
                QueryParam::init('include', $mInclude)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(BuckslipsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a new buckslip given information
     *
     * @param BuckslipEditable $body
     *
     * @return Buckslip Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function buckslipCreate(BuckslipEditable $body): Buckslip
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/buckslips')
            ->auth('basicAuth')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(Buckslip::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieves the details of an existing buckslip. You need only supply the unique customer identifier
     * that was returned upon buckslip creation.
     *
     * @param string $buckslipId id of the buckslip
     *
     * @return Buckslip Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function buckslipRetrieve(string $buckslipId): Buckslip
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/buckslips/{buckslip_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('buckslip_id', $buckslipId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(Buckslip::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update the details of an existing buckslip. You need only supply the unique identifier that was
     * returned upon buckslip creation.
     *
     * @param string $buckslipId id of the buckslip
     * @param string $contentType
     * @param string|null $description Description of the buckslip.
     * @param bool|null $autoReorder Allows for auto reordering
     * @param float|null $reorderQuantity The quantity of items to be reordered (only required when
     *        auto_reorder is true).
     *
     * @return Buckslip Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function buckslipUpdate(
        string $buckslipId,
        string $contentType,
        ?string $description = null,
        ?bool $autoReorder = null,
        ?float $reorderQuantity = null
    ): Buckslip {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/buckslips/{buckslip_id}')
            ->auth('basicAuth')
            ->parameters(
                TemplateParam::init('buckslip_id', $buckslipId),
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('description', $description),
                FormParam::init('auto_reorder', $autoReorder),
                FormParam::init('reorder_quantity', $reorderQuantity)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(Buckslip::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete an existing buckslip. You need only supply the unique identifier that was returned upon
     * buckslip creation.
     *
     * @param string $buckslipId id of the buckslip
     *
     * @return BuckslipsResponse1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function buckslipDelete(string $buckslipId): BuckslipsResponse1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/buckslips/{buckslip_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('buckslip_id', $buckslipId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(BuckslipsResponse1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
