<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Controllers;

use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use LobLib\Exceptions\ApiException;
use LobLib\Exceptions\Domains0Error1Exception;
use LobLib\Models\AllTemplateVersions;
use LobLib\Models\Beforeafter;
use LobLib\Models\ContentTypeEnum;
use LobLib\Models\TemplatesVersionsResponse2;
use LobLib\Models\TemplateVersion;
use LobLib\Utils\FileWrapper;

class TemplateVersionsController extends BaseController
{
    /**
     * Retrieves the template version with the given template and version ids.
     *
     * @param string $tmplId The ID of the template to which the version belongs.
     * @param string $vrsnId id of the template_version
     *
     * @return TemplateVersion Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function templateVersionRetrieve(string $tmplId, string $vrsnId): TemplateVersion
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/templates/{tmpl_id}/versions/{vrsn_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('tmpl_id', $tmplId), TemplateParam::init('vrsn_id', $vrsnId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(TemplateVersion::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Updates the template version with the given template and version ids.
     *
     * @param string $tmplId The ID of the template to which the version belongs.
     * @param string $vrsnId id of the template_version
     * @param string $contentType
     * @param string|null $description An internal description that identifies this resource. Must
     *        be no longer than 255 characters.
     * @param FileWrapper|null $engine
     * @param string[]|null $requiredVars An array of required variables to be used in a template.
     *        Only available for `handlebars` templates.
     *
     * @return TemplateVersion Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function templateVersionUpdate(
        string $tmplId,
        string $vrsnId,
        string $contentType,
        ?string $description = null,
        ?FileWrapper $engine = null,
        ?array $requiredVars = null
    ): TemplateVersion {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/templates/{tmpl_id}/versions/{vrsn_id}')
            ->auth('basicAuth')
            ->parameters(
                TemplateParam::init('tmpl_id', $tmplId),
                TemplateParam::init('vrsn_id', $vrsnId),
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('description', $description),
                FormParam::init('engine', $engine),
                FormParam::init('required_vars', $requiredVars)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(TemplateVersion::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Permanently deletes a template version. A template's `published_version` can not be deleted.
     *
     * @param string $tmplId The ID of the template to which the version belongs.
     * @param string $vrsnId id of the template_version
     *
     * @return TemplatesVersionsResponse2 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function templateVersionDelete(string $tmplId, string $vrsnId): TemplatesVersionsResponse2
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/templates/{tmpl_id}/versions/{vrsn_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('tmpl_id', $tmplId), TemplateParam::init('vrsn_id', $vrsnId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(TemplatesVersionsResponse2::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns a list of template versions for the given template ID. The template versions are sorted by
     * creation date, with the most recently created appearing first.
     *
     *
     * @param string $tmplId The ID of the template associated with the retrieved versions
     * @param int|null $limit How many results to return.
     * @param Beforeafter|null $beforeAfter `before` and `after` are both optional but only one of
     *        them can be in the query at a time.
     * @param string[]|null $mInclude Request that the response include the total count by
     *        specifying `include=["total_count"]`.
     * @param array<string,string>|null $dateCreated Filter by date created. Accepted formats are
     *        ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z"
     *        }` where `gt` is >, `lt` is <, `gte` is ≥, and `lte` is ≤.
     *
     * @return AllTemplateVersions Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function templateVersionsList(
        string $tmplId,
        ?int $limit = 10,
        ?Beforeafter $beforeAfter = null,
        ?array $mInclude = null,
        ?array $dateCreated = null
    ): AllTemplateVersions {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/templates/{tmpl_id}/versions')
            ->auth('basicAuth')
            ->parameters(
                TemplateParam::init('tmpl_id', $tmplId),
                QueryParam::init('limit', $limit),
                QueryParam::init('before/after', $beforeAfter),
                QueryParam::init('include', $mInclude),
                QueryParam::init('date_created', $dateCreated)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(AllTemplateVersions::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a new template version attached to the specified template.
     *
     * @param string $tmplId The ID of the template the new version will be attached to
     * @param string $contentType
     * @param string $html An HTML string of less than 100,000 characters to be used as the
     *        `published_version` of this template. See [here](#section/HTML-Examples) for
     *        guidance on designing HTML templates. Please see endpoint specific documentation for
     *        any other product-specific HTML details:
     *        - [Postcards](#operation/postcard_create) - `front` and `back`
     *        - [Self Mailers](#operation/self_mailer_create) - `inside` and `outside`
     *        - [Letters](#operation/letter_create) - `file`
     *        - [Checks](#operation/check_create) - `check_bottom` and `attachment`
     *        - [Cards](#operation/card_create) - `front` and `back`
     *
     *        If there is a syntax error with your variable names within your HTML, then an error
     *        will be thrown, e.g. using a `{{#users}}` opening tag without the corresponding
     *        closing tag `{{/users}}`.
     * @param string|null $description An internal description that identifies this resource. Must
     *        be no longer than 255 characters.
     * @param FileWrapper|null $engine
     * @param string[]|null $requiredVars An array of required variables to be used in a template.
     *        Only available for `handlebars` templates.
     *
     * @return TemplateVersion Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createTemplateVersion(
        string $tmplId,
        string $contentType,
        string $html,
        ?string $description = null,
        ?FileWrapper $engine = null,
        ?array $requiredVars = null
    ): TemplateVersion {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/templates/{tmpl_id}/versions')
            ->auth('basicAuth')
            ->parameters(
                TemplateParam::init('tmpl_id', $tmplId),
                HeaderParam::init('Content-Type', $contentType)->serializeBy([ContentTypeEnum::class, 'checkValue']),
                FormParam::init('html', $html),
                FormParam::init('description', $description),
                FormParam::init('engine', $engine),
                FormParam::init('required_vars', $requiredVars)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error', Domains0Error1Exception::class))
            ->type(TemplateVersion::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
