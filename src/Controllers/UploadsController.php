<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use LobLib\Exceptions\ApiException;
use LobLib\Exceptions\Domains0Error1Exception;
use LobLib\Exceptions\HTTPValidationError1Exception;
use LobLib\Exceptions\UploadExportError1Exception;
use LobLib\Exceptions\UploadsReport403ErrorException;
use LobLib\Models\Status31Enum;
use LobLib\Models\Upload;
use LobLib\Models\UploadCreateExport;
use LobLib\Models\UploadFile;
use LobLib\Models\UploadsExportsRequest;
use LobLib\Models\UploadsExportsResponse;
use LobLib\Models\UploadsReportResponse;
use LobLib\Models\UploadUpdatable;
use LobLib\Models\UploadWritable;
use LobLib\Utils\FileWrapper;

class UploadsController extends BaseController
{
    /**
     * Returns a list of your uploads. Optionally, filter uploads by campaign.
     *
     * @param string|null $campaignId id of the campaign
     *
     * @return Upload[] Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadsList(?string $campaignId = null): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/uploads')
            ->auth('basicAuth')
            ->parameters(QueryParam::init('campaignId', $campaignId));

        $_resHandler = $this->responseHandler()->type(Upload::class, 1);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a new upload with the provided properties.
     *
     * @param UploadWritable $body
     *
     * @return Upload Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadCreate(UploadWritable $body): Upload
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/uploads')
            ->auth('basicAuth')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('422', ErrorType::init('Validation Error', HTTPValidationError1Exception::class))
            ->type(Upload::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieves the details of an existing upload. You need only supply the unique upload identifier that
     * was returned upon upload creation.
     *
     * @param string $uplId id of the upload
     *
     * @return Upload Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadRetrieve(string $uplId): Upload
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/uploads/{upl_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('upl_id', $uplId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found Error', Domains0Error1Exception::class))
            ->throwErrorOn('422', ErrorType::init('Validation Error', HTTPValidationError1Exception::class))
            ->type(Upload::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update the details of an existing upload. You need only supply the unique identifier that was
     * returned upon upload creation.
     *
     * @param string $uplId id of the upload
     * @param UploadUpdatable $body
     *
     * @return Upload Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadUpdate(string $uplId, UploadUpdatable $body): Upload
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/uploads/{upl_id}')
            ->auth('basicAuth')
            ->parameters(
                TemplateParam::init('upl_id', $uplId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found Error', Domains0Error1Exception::class))
            ->throwErrorOn('422', ErrorType::init('Validation Error', HTTPValidationError1Exception::class))
            ->type(Upload::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete an existing upload. You need only supply the unique identifier that was returned upon upload
     * creation.
     *
     * @param string $uplId id of the upload
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadDelete(string $uplId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/uploads/{upl_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('upl_id', $uplId));

        $this->execute($_reqBuilder);
    }

    /**
     * Upload an [audience file](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-
     * triggered-sends/campaign-audience-guide) and associate it with an upload.
     *
     * @param string $uplId ID of the upload
     * @param FileWrapper|null $file
     *
     * @return UploadFile Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadFile(string $uplId, ?FileWrapper $file = null): UploadFile
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/uploads/{upl_id}/file')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('upl_id', $uplId), FormParam::init('file', $file));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('422', ErrorType::init('Validation Error', HTTPValidationError1Exception::class))
            ->type(UploadFile::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Campaign Exports can help you understand exactly which records in a campaign could not be created.
     * By initiating and retrieving an export, you will get row-by-row errors for your campaign. For a step-
     * by-step walkthrough of creating a campaign and exporting failures, see our [Campaigns Guide](https:
     * //help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/launch-your-first-
     * campaign).
     *
     * Create an export file associated with an upload.
     *
     * @param string $uplId ID of the upload
     * @param UploadsExportsRequest $body
     *
     * @return UploadCreateExport Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadExportCreate(string $uplId, UploadsExportsRequest $body): UploadCreateExport
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/uploads/{upl_id}/exports')
            ->auth('basicAuth')
            ->parameters(
                TemplateParam::init('upl_id', $uplId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('401', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('402', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('403', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('404', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('405', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('406', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('407', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('408', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('409', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('410', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('411', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('412', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('413', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('414', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('415', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('416', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('417', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('418', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('419', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('420', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('421', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('422', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('423', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('424', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('425', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('426', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('427', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('428', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('429', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('430', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('431', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('432', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('433', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('434', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('435', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('436', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('437', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('438', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('439', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('440', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('441', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('442', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('443', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('444', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('445', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('446', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('447', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('448', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('449', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('450', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('451', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('452', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('453', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('454', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('455', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('456', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('457', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('458', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('459', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('460', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('461', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('462', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('463', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('464', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('465', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('466', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('467', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('468', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('469', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('470', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('471', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('472', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('473', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('474', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('475', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('476', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('477', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('478', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('479', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('480', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('481', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('482', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('483', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('484', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('485', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('486', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('487', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('488', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('489', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('490', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('491', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('492', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('493', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('494', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('495', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('496', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('497', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('498', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->throwErrorOn('499', ErrorType::init('Create Export Error', UploadExportError1Exception::class))
            ->type(UploadCreateExport::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieves the line item data for each row from the csv file associated with the upload id record.
     * NOTE: This endpoint is currently feature flagged. Please reach out to Lob's support team if you
     * would like access to this API endpoint.
     *
     * @param string $uplId ID of the upload
     * @param string|null $status The status of line items to filter and retrieve. By default all
     *        line items are returned.
     * @param int|null $limit How many results to return.
     * @param int|null $offset An integer that designates the offset at which to begin returning
     *        results. Defaults to 0.
     *
     * @return UploadsReportResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reportRetrieve(
        string $uplId,
        ?string $status = null,
        ?int $limit = 100,
        ?int $offset = 0
    ): UploadsReportResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/uploads/{upl_id}/report')
            ->auth('basicAuth')
            ->parameters(
                TemplateParam::init('upl_id', $uplId),
                QueryParam::init('status', $status)->serializeBy([Status31Enum::class, 'checkValue']),
                QueryParam::init('limit', $limit),
                QueryParam::init('offset', $offset)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('403', ErrorType::init('Forbidden Error', UploadsReport403ErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found Error', Domains0Error1Exception::class))
            ->type(UploadsReportResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieves the details of an existing export. You need only supply the unique export identifier that
     * was returned upon export creation. If you try retrieving an export immediately after creating one (i.
     * e., before we're done processing the export), you will get back an export object with `state =
     * in_progress`.
     *
     * @param string $uplId ID of the upload
     * @param string $exId ID of the export
     *
     * @return UploadsExportsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function exportRetrieve(string $uplId, string $exId): UploadsExportsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/uploads/{upl_id}/exports/{ex_id}')
            ->auth('basicAuth')
            ->parameters(TemplateParam::init('upl_id', $uplId), TemplateParam::init('ex_id', $exId));

        $_resHandler = $this->responseHandler()->type(UploadsExportsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
