<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Tests\Controllers;

use Core\TestCase\TestParam;
use LobLib\Controllers\BuckslipsController;
use LobLib\Exceptions;
use LobLib\Models;

class BuckslipsControllerTest extends BaseTestController
{
    /**
     * @var BuckslipsController BuckslipsController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getBuckslipsController();
    }

    public function testBuckslipsList()
    {
        // Parameters for the API call
        $limit = 10;
        $beforeAfter = null;
        $mInclude = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->buckslipsList($limit, $beforeAfter, $mInclude);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testBuckslipCreate()
    {
        // Parameters for the API call
        $body = TestParam::object(
            '{"description":"Test buckslip","front":"https://s3-us-west-2.amazonaws.com/public.' .
            'lob.com/assets/buckslip.pdf","back":"https://s3-us-west-2.amazonaws.com/public.lob.' .
            'com/assets/buckslip.pdf"}',
            Models\BuckslipEditable::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->buckslipCreate($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }
}
