<?php

declare(strict_types=1);

/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace LobLib\Tests;

use Core\Types\CallbackCatcher;
use LobLib\Authentication\BasicAuthCredentialsBuilder;
use LobLib\LobClient;
use LobLib\LobClientBuilder;

class ClientFactory
{
    public static function create(CallbackCatcher $httpCallback): LobClient
    {
        $clientBuilder = LobClientBuilder::init();
        $clientBuilder = self::addConfigurationFromEnvironment($clientBuilder);
        $clientBuilder = self::addTestConfiguration($clientBuilder);
        return $clientBuilder->httpCallback($httpCallback)->build();
    }

    public static function addTestConfiguration(LobClientBuilder $builder): LobClientBuilder
    {
        return $builder;
    }

    public static function addConfigurationFromEnvironment(LobClientBuilder $builder): LobClientBuilder
    {
        $timeout = getenv('LOB_LIB_TIMEOUT');
        $numberOfRetries = getenv('LOB_LIB_NUMBER_OF_RETRIES');
        $maximumRetryWaitTime = getenv('LOB_LIB_MAXIMUM_RETRY_WAIT_TIME');
        $environment = getenv('LOB_LIB_ENVIRONMENT');
        $basicAuthUserName = getenv('LOB_LIB_BASIC_AUTH_USER_NAME');
        $basicAuthPassword = getenv('LOB_LIB_BASIC_AUTH_PASSWORD');

        if (!empty($timeout) && \is_numeric($timeout)) {
            $builder->timeout(intval($timeout));
        }

        if (!empty($numberOfRetries) && \is_numeric($numberOfRetries)) {
            $builder->numberOfRetries(intval($numberOfRetries));
        }

        if (!empty($maximumRetryWaitTime) && \is_numeric($maximumRetryWaitTime)) {
            $builder->maximumRetryWaitTime(intval($maximumRetryWaitTime));
        }

        if (!empty($environment)) {
            $builder->environment($environment);
        }

        if (!empty($basicAuthUserName) && !empty($basicAuthPassword)) {
            $builder->basicAuthCredentials(
                BasicAuthCredentialsBuilder::init($basicAuthUserName, $basicAuthPassword)
            );
        }

        return $builder;
    }
}
